import std/[strutils, sequtils, options, tables, hashes, times, base64]
import std/sha1 as stdsha1
import std/sha2 as stdsha2
import std/hmac as stdhmac
import std/nimcrypto
import std/[math, sets, unicode, uri, parseopt, random, threadpool, locks]
import std/[asyncdispatch, json, parsecfg]
import std/punycode
import ../records

# 螳壽焚螳夂ｾｩ
const
  MAX_CACHE_SIZE* = 10000          # 譛螟ｧ繧ｭ繝｣繝・す繝･繧ｵ繧､繧ｺ
  MAX_SIGNATURE_LIFETIME* = 30*24*60*60  # 譛螟ｧ鄂ｲ蜷肴怏蜉ｹ譛滄俣 (30譌･)
  MIN_KEY_SIZE_RSA* = 2048         # RSA縺ｮ譛蟆城嵯髟ｷ
  MIN_KEY_SIZE_ECC* = 256          # ECC縺ｮ譛蟆城嵯髟ｷ
  NSEC3_MAX_ITERATIONS* = 100      # NSEC3縺ｮ譛螟ｧ繧､繝・Ξ繝ｼ繧ｷ繝ｧ繝ｳ
  ROOT_TRUST_ANCHOR_URL* = "https://data.iana.org/root-anchors/root-anchors.xml"  # 繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼURL
  DNSSEC_PORT* = 53                # DNSSEC縺ｮ繝・ヵ繧ｩ繝ｫ繝医・繝ｼ繝・
  
  # RFC 8624縺ｫ蝓ｺ縺･縺乗耳螂ｨ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝
  RECOMMENDED_ALGORITHMS* = [
    DnsKeyAlgorithm.RSA_SHA256,
    DnsKeyAlgorithm.RSA_SHA512,
    DnsKeyAlgorithm.ECDSA_P256_SHA256,
    DnsKeyAlgorithm.ECDSA_P384_SHA384,
    DnsKeyAlgorithm.ED25519,
    DnsKeyAlgorithm.ED448
  ]

# 繧ｹ繝ｬ繝・ラ螳牙・諤ｧ縺ｮ縺溘ａ縺ｮ蝙・
type
  ThreadSafeCache* = object
    lock: Lock
    cache: Table[string, tuple[data: string, expiration: Time]]

type
  DnsKeyAlgorithm* = enum
    ## DNS繧ｭ繝ｼ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝 (RFC 4034, 5702, 6605, 8624)
    RSA_MD5 = 1      # 髱樊耳螂ｨ
    DH = 2           # Diffie-Hellman
    DSA = 3          # Digital Signature Algorithm
    RSA_SHA1 = 5     # RSA/SHA-1
    DSA_NSEC3_SHA1 = 6  # DSA-NSEC3-SHA1
    RSASHA1_NSEC3_SHA1 = 7  # RSASHA1-NSEC3-SHA1
    RSA_SHA256 = 8   # RSA/SHA-256
    RSA_SHA512 = 10  # RSA/SHA-512
    ECC_GOST = 12    # GOST R 34.10-2001
    ECDSA_P256_SHA256 = 13  # ECDSA Curve P-256 with SHA-256
    ECDSA_P384_SHA384 = 14  # ECDSA Curve P-384 with SHA-384
    ED25519 = 15     # Ed25519
    ED448 = 16       # Ed448

  DigestAlgorithm* = enum
    ## 繝繧､繧ｸ繧ｧ繧ｹ繝医い繝ｫ繧ｴ繝ｪ繧ｺ繝 (RFC 4509, 5933, 6605)
    SHA1 = 1         # SHA-1
    SHA256 = 2       # SHA-256
    GOST_R_34_11_94 = 3  # GOST R 34.11-94
    SHA384 = 4       # SHA-384

  DnsKeyRecord* = object
    ## DNSKEY繝ｬ繧ｳ繝ｼ繝・(RFC 4034)
    flags*: uint16       # 繝輔Λ繧ｰ繝輔ぅ繝ｼ繝ｫ繝・
    protocol*: uint8     # 繝励Ο繝医さ繝ｫ繝輔ぅ繝ｼ繝ｫ繝・(蟶ｸ縺ｫ3)
    algorithm*: DnsKeyAlgorithm  # 骰ｵ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝
    publicKey*: string   # 蜈ｬ髢矩嵯繝・・繧ｿ

  DsRecord* = object
    ## DS繝ｬ繧ｳ繝ｼ繝・(RFC 4034)
    keyTag*: uint16      # 繧ｭ繝ｼ繧ｿ繧ｰ
    algorithm*: DnsKeyAlgorithm  # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝
    digestType*: DigestAlgorithm  # 繝繧､繧ｸ繧ｧ繧ｹ繝医ち繧､繝・
    digest*: string      # 繝繧､繧ｸ繧ｧ繧ｹ繝・

  RrsigRecord* = object
    ## RRSIG繝ｬ繧ｳ繝ｼ繝・(RFC 4034)
    typeCovered*: DnsRecordType  # 繧ｫ繝舌・縺輔ｌ繧九ち繧､繝・
    algorithm*: DnsKeyAlgorithm  # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝
    labels*: uint8       # 繝ｩ繝吶Ν謨ｰ
    originalTtl*: uint32  # 蜈・・TTL
    signatureExpiration*: Time  # 鄂ｲ蜷肴怏蜉ｹ譛滄剞
    signatureInception*: Time   # 鄂ｲ蜷埼幕蟋区凾髢・
    keyTag*: uint16      # 繧ｭ繝ｼ繧ｿ繧ｰ
    signerName*: string  # 鄂ｲ蜷崎・錐
    signature*: string   # 鄂ｲ蜷阪ョ繝ｼ繧ｿ

  NsecRecord* = object
    ## NSEC繝ｬ繧ｳ繝ｼ繝・(RFC 4034)
    nextDomainName*: string  # 谺｡縺ｮ繝峨Γ繧､繝ｳ蜷・
    typeBitMaps*: seq[DnsRecordType]  # 繧ｿ繧､繝励ン繝・ヨ繝槭ャ繝・

  Nsec3Record* = object
    ## NSEC3繝ｬ繧ｳ繝ｼ繝・(RFC 5155)
    hashAlgorithm*: uint8  # 繝上ャ繧ｷ繝･繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝
    flags*: uint8         # 繝輔Λ繧ｰ
    iterations*: uint16   # 繧､繝・Ξ繝ｼ繧ｷ繝ｧ繝ｳ
    salt*: string         # 繧ｽ繝ｫ繝・
    nextHashedOwner*: string  # 谺｡縺ｮ繝上ャ繧ｷ繝･謇譛芽・
    typeBitMaps*: seq[DnsRecordType]  # 繧ｿ繧､繝励ン繝・ヨ繝槭ャ繝・

  DnssecStatus* = enum
    ## DNSSEC讀懆ｨｼ繧ｹ繝・・繧ｿ繧ｹ
    Secure,         # 螳悟・縺ｫ讀懆ｨｼ貂医∩
    Insecure,       # DNSSEC縺悟ｮ溯｣・＆繧後※縺・↑縺・
    Indeterminate,  # 讀懆ｨｼ縺ｧ縺阪↑縺・
    Bogus           # 讀懆ｨｼ螟ｱ謨・

  DnssecValidator* = ref object
    ## DNSSEC讀懆ｨｼ繧ｨ繝ｳ繧ｸ繝ｳ
    trustAnchors*: Table[string, seq[DnsKeyRecord]]  # 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ
    dsRecords*: Table[string, seq[DsRecord]]  # DS繝ｬ繧ｳ繝ｼ繝・
    keyRecords*: Table[string, seq[DnsKeyRecord]]  # 繧ｭ繝ｼ繝ｬ繧ｳ繝ｼ繝・

  RSAVerifyContext* = ref object
    ## RSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝・
    publicKey: string  # 蜈ｬ髢矩嵯 (RFC 3110 繝輔か繝ｼ繝槭ャ繝・
    algorithm: DnsKeyAlgorithm  # 菴ｿ逕ｨ縺吶ｋ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝

  DSAVerifyContext* = ref object
    ## DSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝・
    publicKey: string  # 蜈ｬ髢矩嵯
    algorithm: DnsKeyAlgorithm  # 菴ｿ逕ｨ縺吶ｋ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝

  ECDSAVerifyContext* = ref object
    ## ECDSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝・
    publicKey: string  # 蜈ｬ髢矩嵯
    algorithm: DnsKeyAlgorithm  # 菴ｿ逕ｨ縺吶ｋ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝

  EdDSAVerifyContext* = ref object
    ## EdDSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝・
    publicKey: string  # 蜈ｬ髢矩嵯
    algorithm: DnsKeyAlgorithm  # 菴ｿ逕ｨ縺吶ｋ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝

  DnssecTestResult* = object
    ## DNSSEC讀懆ｨｼ繝・せ繝育ｵ先棡
    domain*: string            # 繝・せ繝亥ｯｾ雎｡繝峨Γ繧､繝ｳ
    status*: DnssecStatus      # 讀懆ｨｼ繧ｹ繝・・繧ｿ繧ｹ
    hasValidSignature*: bool   # 譛牙柑縺ｪ鄂ｲ蜷阪′縺ゅｋ縺・
    hasDnskey*: bool           # DNSKEY繝ｬ繧ｳ繝ｼ繝峨′縺ゅｋ縺・
    hasDs*: bool               # DS繝ｬ繧ｳ繝ｼ繝峨′縺ゅｋ縺・
    signatureExpiration*: Time  # 鄂ｲ蜷阪・譛牙柑譛滄剞
    keyAlgorithms*: seq[DnsKeyAlgorithm]  # 菴ｿ逕ｨ縺輔ｌ縺ｦ縺・ｋ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝
    verificationTime*: float   # 讀懆ｨｼ縺ｫ縺九°縺｣縺滓凾髢難ｼ医Α繝ｪ遘抵ｼ・
    errorMessages*: seq[string]  # 繧ｨ繝ｩ繝ｼ繝｡繝・そ繝ｼ繧ｸ
    warnings*: seq[string]     # 隴ｦ蜻翫Γ繝・そ繝ｼ繧ｸ

  DnssecVerificationCache* = ref object
    ## DNSSEC讀懆ｨｼ邨先棡繧ｭ繝｣繝・す繝･
    cache*: Table[string, tuple[status: DnssecStatus, expiration: Time]]
    maxEntries*: int           # 繧ｭ繝｣繝・す繝･縺ｮ譛螟ｧ繧ｨ繝ｳ繝医Μ謨ｰ
    hits*: int                 # 繧ｭ繝｣繝・す繝･繝偵ャ繝域焚
    misses*: int               # 繧ｭ繝｣繝・す繝･繝溘せ謨ｰ

  DnssecStats* = object
    ## DNSSEC讀懆ｨｼ邨ｱ險・
    validations*: int          # 螳溯｡後＆繧後◆讀懆ｨｼ縺ｮ謨ｰ
    successfulValidations*: int # 謌仙粥縺励◆讀懆ｨｼ縺ｮ謨ｰ
    failedValidations*: int    # 螟ｱ謨励＠縺滓､懆ｨｼ縺ｮ謨ｰ
    averageValidationTime*: float # 蟷ｳ蝮・､懆ｨｼ譎る俣・医Α繝ｪ遘抵ｼ・
    cacheSizeBytes*: int       # 繧ｭ繝｣繝・す繝･繧ｵ繧､繧ｺ・医ヰ繧､繝茨ｼ・
    validationsByStatus*: Table[DnssecStatus, int] # 繧ｹ繝・・繧ｿ繧ｹ蛻･縺ｮ讀懆ｨｼ謨ｰ
    validationsByAlgorithm*: Table[DnsKeyAlgorithm, int] # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝蛻･縺ｮ讀懆ｨｼ謨ｰ
    startTime*: Time           # 邨ｱ險亥庶髮・幕蟋区凾髢・

  DnssecError* = object of CatchableError
    ## DNSSEC讀懆ｨｼ縺ｫ髢｢騾｣縺吶ｋ繧ｨ繝ｩ繝ｼ
    domain*: string
    recordType*: DnsRecordType
    status*: DnssecStatus
    detail*: string

proc newDnssecValidator*(): DnssecValidator =
  ## 譁ｰ縺励＞DNSSEC讀懆ｨｼ繧ｨ繝ｳ繧ｸ繝ｳ繧剃ｽ懈・
  result = DnssecValidator(
    trustAnchors: initTable[string, seq[DnsKeyRecord]](),
    dsRecords: initTable[string, seq[DsRecord]](),
    keyRecords: initTable[string, seq[DnsKeyRecord]]()
  )

proc addTrustAnchor*(validator: DnssecValidator, domain: string, keyRecord: DnsKeyRecord) =
  ## 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｿｽ蜉
  if not validator.trustAnchors.hasKey(domain):
    validator.trustAnchors[domain] = @[]
  validator.trustAnchors[domain].add(keyRecord)

proc addDsRecord*(validator: DnssecValidator, domain: string, dsRecord: DsRecord) =
  ## DS繝ｬ繧ｳ繝ｼ繝峨ｒ霑ｽ蜉
  if not validator.dsRecords.hasKey(domain):
    validator.dsRecords[domain] = @[]
  validator.dsRecords[domain].add(dsRecord)

proc addKeyRecord*(validator: DnssecValidator, domain: string, keyRecord: DnsKeyRecord) =
  ## 繧ｭ繝ｼ繝ｬ繧ｳ繝ｼ繝峨ｒ霑ｽ蜉
  if not validator.keyRecords.hasKey(domain):
    validator.keyRecords[domain] = @[]
  validator.keyRecords[domain].add(keyRecord)

proc calculateKeyTag*(key: DnsKeyRecord): uint16 =
  ## 繧ｭ繝ｼ繧ｿ繧ｰ繧定ｨ育ｮ・(RFC 4034, Appendix B)
  var ac: uint32 = 0
  
  # 繧ｭ繝ｼ繝・・繧ｿ繧偵Ρ繧､繝､繝ｼ繝輔か繝ｼ繝槭ャ繝医↓螟画鋤
  var wireFormat = newSeq[byte]()
  
  # 繝輔Λ繧ｰ縲√・繝ｭ繝医さ繝ｫ縲√い繝ｫ繧ｴ繝ｪ繧ｺ繝繧定ｿｽ蜉
  wireFormat.add(byte((key.flags shr 8) and 0xFF))
  wireFormat.add(byte(key.flags and 0xFF))
  wireFormat.add(byte(key.protocol))
  wireFormat.add(byte(key.algorithm))
  
  # 蜈ｬ髢矩嵯繝・・繧ｿ繧定ｿｽ蜉
  for b in key.publicKey:
    wireFormat.add(byte(b))
  
  # RFC 4034 Appendix B縺ｮ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝繧貞ｮ溯｣・
  if wireFormat.len mod 2 != 0:
    ac += uint32(wireFormat[^1]) shl 8
  
  for i in countup(0, wireFormat.len - 1, 2):
    if i + 1 < wireFormat.len:
      ac += (uint32(wireFormat[i]) shl 8) + uint32(wireFormat[i + 1])
    else:
      ac += uint32(wireFormat[i]) shl 8
  
  ac += (ac shr 16) and 0xFFFF
  
  return uint16(ac and 0xFFFF)

proc isZoneKey*(key: DnsKeyRecord): bool =
  ## 繧ｾ繝ｼ繝ｳ繧ｭ繝ｼ縺九←縺・°繧堤｢ｺ隱・(RFC 4034, Section 2.1.1)
  return (key.flags and 0x0100) != 0

proc isSecureEntryPoint*(key: DnsKeyRecord): bool =
  ## 繧ｻ繧ｭ繝･繧｢繧ｨ繝ｳ繝医Μ繝昴う繝ｳ繝・SEP)縺九←縺・°繧堤｢ｺ隱・(RFC 4034, Section 2.1.1)
  return (key.flags and 0x0001) != 0

proc calculateDigestSHA1(data: string): string =
  ## SHA-1繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ險育ｮ・
  var ctx: stdsha1.Sha1
  ctx.init()
  ctx.update(data)
  return ctx.final()

proc calculateDigestSHA256(data: string): string =
  ## SHA-256繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ險育ｮ・
  var ctx: stdsha2.Sha256
  ctx.init()
  ctx.update(data)
  return ctx.final()

proc calculateDigestSHA384(data: string): string =
  ## SHA-384繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ險育ｮ・
  var ctx: stdsha2.Sha384
  ctx.init()
  ctx.update(data)
  return ctx.final()

proc calculateDnsKeyDigest*(key: DnsKeyRecord, digestType: DigestAlgorithm, domain: string): string =
  ## DNSKEY繝ｬ繧ｳ繝ｼ繝峨°繧峨ム繧､繧ｸ繧ｧ繧ｹ繝医ｒ險育ｮ・(RFC 4034, Section 5.1.4)
  var canonicalData = domain.toLower()
  
  # DNSKEY縺ｮ繝ｯ繧､繝､繝ｼ繝輔か繝ｼ繝槭ャ繝医ｒ霑ｽ蜉
  # 繝輔Λ繧ｰ縲√・繝ｭ繝医さ繝ｫ縲√い繝ｫ繧ｴ繝ｪ繧ｺ繝
  canonicalData.add(char((key.flags shr 8) and 0xFF))
  canonicalData.add(char(key.flags and 0xFF))
  canonicalData.add(char(key.protocol))
  canonicalData.add(char(key.algorithm))
  
  # 蜈ｬ髢矩嵯繝・・繧ｿ
  canonicalData.add(key.publicKey)
  
  # 繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ險育ｮ・
  case digestType:
  of SHA1:
    result = calculateDigestSHA1(canonicalData)
  of SHA256:
    result = calculateDigestSHA256(canonicalData)
  of SHA384:
    result = calculateDigestSHA384(canonicalData)
  else:
    # 繧ｵ繝昴・繝医＆繧後※縺・↑縺・ム繧､繧ｸ繧ｧ繧ｹ繝医ち繧､繝・
    result = ""

proc verifyDsRecord*(ds: DsRecord, key: DnsKeyRecord, domain: string): bool =
  ## DS繝ｬ繧ｳ繝ｼ繝峨′迚ｹ螳壹・DNSKEY繝ｬ繧ｳ繝ｼ繝峨↓蟇ｾ蠢懊☆繧九°讀懆ｨｼ
  # 繧ｭ繝ｼ繧ｿ繧ｰ繧偵メ繧ｧ繝・け
  if ds.keyTag != calculateKeyTag(key):
    return false
  
  # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝繧偵メ繧ｧ繝・け
  if ds.algorithm != key.algorithm:
    return false
  
  # 繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ險育ｮ励＠縺ｦ豈碑ｼ・
  let calculatedDigest = calculateDnsKeyDigest(key, ds.digestType, domain)
  return calculatedDigest == ds.digest

proc newRSAVerifyContext*(publicKey: string): RSAVerifyContext =
  ## RSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝医ｒ菴懈・
  result = RSAVerifyContext(
    publicKey: publicKey,
    algorithm: RSA_SHA256  # 繝・ヵ繧ｩ繝ｫ繝医・RSA/SHA-256
  )

proc newDSAVerifyContext*(publicKey: string): DSAVerifyContext =
  ## DSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝医ｒ菴懈・
  result = DSAVerifyContext(
    publicKey: publicKey,
    algorithm: DSA  # 繝・ヵ繧ｩ繝ｫ繝医・DSA
  )

proc newECDSAVerifyContext*(publicKey: string): ECDSAVerifyContext =
  ## ECDSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝医ｒ菴懈・
  result = ECDSAVerifyContext(
    publicKey: publicKey,
    algorithm: ECDSA_P256_SHA256  # 繝・ヵ繧ｩ繝ｫ繝医・ECDSA P-256 with SHA-256
  )

proc newEdDSAVerifyContext*(publicKey: string, algorithm: DnsKeyAlgorithm): EdDSAVerifyContext =
  ## EdDSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝医ｒ菴懈・
  result = EdDSAVerifyContext(
    publicKey: publicKey,
    algorithm: algorithm  # ED25519縺ｾ縺溘・ED448
  )

proc parseRSAPublicKey(publicKey: string): (seq[byte], seq[byte]) =
  ## RSA蜈ｬ髢矩嵯繧偵ヱ繝ｼ繧ｹ (RFC 3110蠖｢蠑・
  try:
    # RFC 3110蠖｢蠑・ <exponent length byte(s)> <exponent> <modulus>
    var pos = 0
    var expLenByte = byte(publicKey[pos])
    pos += 1
    
    var expLen: int
    if expLenByte == 0:
      # 髟ｷ縺・お繧ｯ繧ｹ繝昴・繝阪Φ繝・
      expLen = (int(byte(publicKey[pos])) shl 8) or int(byte(publicKey[pos+1]))
      pos += 2
    else:
      expLen = int(expLenByte)
    
    # 繧ｨ繧ｯ繧ｹ繝昴・繝阪Φ繝医ｒ蜿門ｾ・
    var exponent = newSeq[byte](expLen)
    for i in 0..<expLen:
      exponent[i] = byte(publicKey[pos])
      pos += 1
    
    # 谿九ｊ縺ｯ繝｢繧ｸ繝･繝ｩ繧ｹ
    var modulus = newSeq[byte](publicKey.len - pos)
    for i in 0..<modulus.len:
      modulus[i] = byte(publicKey[pos])
      pos += 1
    
    return (exponent, modulus)
  except:
    return (@[], @[])

proc verify*(ctx: RSAVerifyContext, signedData: string, signature: string): bool =
  ## RSA鄂ｲ蜷阪・讀懆ｨｼ
  try:
    # 鄂ｲ蜷阪ワ繝・す繝･繧帝∈謚・
    var hashAlgorithm: nimcrypto.HashType
    case ctx.algorithm
    of RSA_SHA1, RSASHA1_NSEC3_SHA1:
      hashAlgorithm = nimcrypto.SHA1
    of RSA_SHA256:
      hashAlgorithm = nimcrypto.SHA256
    of RSA_SHA512:
      hashAlgorithm = nimcrypto.SHA512
    else:
      return false
    
    # RSA蜈ｬ髢矩嵯繧偵ヱ繝ｼ繧ｹ
    let (exponent, modulus) = parseRSAPublicKey(ctx.publicKey)
    if exponent.len == 0 or modulus.len == 0:
      return false
    
    # RSA蜈ｬ髢矩嵯繧剃ｽ懈・
    var rsa = nimcrypto.newRSAPublicKey(nimcrypto.RSAEP_PKCS1_V15, exponent, modulus)
    
    # 鄂ｲ蜷阪ｒ讀懆ｨｼ
    var signatureBytes = newSeq[byte](signature.len)
    for i in 0..<signature.len:
      signatureBytes[i] = byte(signature[i])
    
    return nimcrypto.rsaVerify(rsa, cast[ptr byte](addr signedData[0]), 
                           signedData.len, addr signatureBytes[0], 
                           signatureBytes.len, hashAlgorithm)
  except:
    return false

proc verify*(ctx: DSAVerifyContext, signedData: string, signature: string): bool =
  ## DSA鄂ｲ蜷阪・讀懆ｨｼ
  try:
    # 驕ｩ蛻・↑繝上ャ繧ｷ繝･髢｢謨ｰ繧帝∈謚・
    var hashFunc: proc(data: string): string
    
    case ctx.algorithm
    of DSA, DSA_NSEC3_SHA1:
      hashFunc = calculateDigestSHA1
    else:
      logError("DNSSEC繧ｨ繝ｩ繝ｼ: 繧ｵ繝昴・繝医＆繧後※縺・↑縺ДSA繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝")
      return false
    
    # 鄂ｲ蜷阪ョ繝ｼ繧ｿ繧偵ワ繝・す繝･蛹・
    let hash = hashFunc(signedData)
    
    # DSA蜈ｬ髢矩嵯縺ｮ譛蟆城聞繝√ぉ繝・け
    if ctx.publicKey.len < 8:
      logError("DNSSEC繧ｨ繝ｩ繝ｼ: DSA蜈ｬ髢矩嵯縺檎洒縺吶℃縺ｾ縺・(髟ｷ縺・ " & $ctx.publicKey.len & ")")
      return false
      
    # DSA鄂ｲ蜷阪・髟ｷ縺輔メ繧ｧ繝・け (r|s蠖｢蠑・
    if signature.len < 40:  # 譛菴弱〒繧Ｓ(20繝舌う繝・+s(20繝舌う繝・縺悟ｿ・ｦ・
      logError("DNSSEC繧ｨ繝ｩ繝ｼ: DSA鄂ｲ蜷阪ョ繝ｼ繧ｿ縺檎洒縺吶℃縺ｾ縺・(髟ｷ縺・ " & $signature.len & ")")
      return false
    
    # 鄂ｲ蜷阪ョ繝ｼ繧ｿ縺ｮ謨ｴ蜷域ｧ繝√ぉ繝・け
    if hash.len != 20:  # SHA-1繝上ャ繧ｷ繝･縺ｯ20繝舌う繝・
      logError("DNSSEC繧ｨ繝ｩ繝ｼ: 繝上ャ繧ｷ繝･髟ｷ縺御ｸ肴ｭ｣縺ｧ縺・(髟ｷ縺・ " & $hash.len & ")")
      return false

    # DSA蜈ｬ髢矩嵯繝代Λ繝｡繝ｼ繧ｿ繧呈歓蜃ｺ
    # T + Q + P + G + Y 縺ｮ蠖｢蠑・(RFC 2536)
    var offset = 0
    let t = byte(ctx.publicKey[offset])
    offset += 1
    
    # Q (160繝薙ャ繝・
    let qLen = 20
    var q = newSeq[byte](qLen)
    for i in 0..<qLen:
      if offset < ctx.publicKey.len:
        q[i] = byte(ctx.publicKey[offset])
        offset += 1
      else:
        return false
    
    # P (512 + 64*T 繝薙ャ繝・
    let pLen = 64 + 8*int(t)
    var p = newSeq[byte](pLen)
    for i in 0..<pLen:
      if offset < ctx.publicKey.len:
        p[i] = byte(ctx.publicKey[offset])
        offset += 1
      else:
        return false
    
    # G
    let gLen = pLen
    var g = newSeq[byte](gLen)
    for i in 0..<gLen:
      if offset < ctx.publicKey.len:
        g[i] = byte(ctx.publicKey[offset])
        offset += 1
      else:
        return false
    
    # Y (蜈ｬ髢句､)
    let yLen = pLen
    var y = newSeq[byte](yLen)
    for i in 0..<yLen:
      if offset < ctx.publicKey.len:
        y[i] = byte(ctx.publicKey[offset])
        offset += 1
      else:
        return false
    
    # 鄂ｲ蜷阪ョ繝ｼ繧ｿ繧池縺ｨs縺ｫ蛻・牡
    let rLen = 20
    let sLen = 20
    
    var r = newSeq[byte](rLen)
    var s = newSeq[byte](sLen)
    
    for i in 0..<rLen:
      if i < signature.len:
        r[i] = byte(signature[i])
      else:
        return false
    
    for i in 0..<sLen:
      if rLen + i < signature.len:
        s[i] = byte(signature[rLen + i])
      else:
        return false
    
    # DSA鄂ｲ蜷肴､懆ｨｼ縺ｮ螳溯｣・
    import nimcrypto/[hash, sha1, utils]
    import math

    # 繝｢繧ｸ繝･繝ｩ繝ｼ騾・焚繧定ｨ育ｮ励☆繧矩未謨ｰ
    proc modInverse(a: seq[byte], m: seq[byte]): seq[byte] =
      # 諡｡蠑ｵ繝ｦ繝ｼ繧ｯ繝ｪ繝・ラ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝繧剃ｽｿ逕ｨ縺励※繝｢繧ｸ繝･繝ｩ繝ｼ騾・焚繧定ｨ育ｮ・
      var a_int = fromBytesLE(a)
      var m_int = fromBytesLE(m)
      
      var t = 0
      var newt = 1
      var r = int(m_int)
      var newr = int(a_int)
      
      while newr != 0:
        let quotient = r div newr
        (t, newt) = (newt, t - quotient * newt)
        (r, newr) = (newr, r - quotient * newr)
      
      if r > 1:
        # 騾・焚縺悟ｭ伜惠縺励↑縺・
        return @[]
      
      if t < 0:
        t += int(m_int)
      
      return toBytesLE(uint64(t))
    
    # 繝｢繧ｸ繝･繝ｩ繝ｼ縺ｹ縺堺ｹ励ｒ險育ｮ励☆繧矩未謨ｰ
    proc powMod(base: seq[byte], exp: seq[byte], modulus: seq[byte]): seq[byte] =
      var result = @[byte(1)]
      var base_copy = base
      var exp_copy = fromBytesLE(exp)
      let mod_int = fromBytesLE(modulus)
      
      while exp_copy > 0:
        if (exp_copy and 1) == 1:
          result = toBytesLE((fromBytesLE(result) * fromBytesLE(base_copy)) mod mod_int)
        exp_copy = exp_copy shr 1
        base_copy = toBytesLE((fromBytesLE(base_copy) * fromBytesLE(base_copy)) mod mod_int)
      
      return result
    
    # DSA鄂ｲ蜷肴､懆ｨｼ縺ｮ螳溯｣・
    let q = ctx.q # DSA繝代Λ繝｡繝ｼ繧ｿq
    
    # 1. 鄂ｲ蜷阪・遽・峇繝√ぉ繝・け: 0 < r < q 縺翫ｈ縺ｳ 0 < s < q
    let r_int = fromBytesLE(r)
    let s_int = fromBytesLE(s)
    let q_int = fromBytesLE(q)
    
    if r_int <= 0 or r_int >= q_int or s_int <= 0 or s_int >= q_int:
      echo "DSA鄂ｲ蜷阪・蛟､縺檎ｯ・峇螟悶〒縺・
      return false
    
    # 2. 繝上ャ繧ｷ繝･險育ｮ・
    var ctx_sha1: sha1
    ctx_sha1.init()
    ctx_sha1.update(signedData)
    let hash = ctx_sha1.finish()
    
    # 3. w = s^-1 mod q 繧定ｨ育ｮ・
    let w = modInverse(s, q)
    if w.len == 0:
      echo "繝｢繧ｸ繝･繝ｩ繝ｼ騾・焚縺ｮ險育ｮ励↓螟ｱ謨励＠縺ｾ縺励◆"
      return false
    
    # 4. u1 = (SHA1(M) * w) mod q 繧定ｨ育ｮ・
    let u1 = toBytesLE((fromBytesLE(hash) * fromBytesLE(w)) mod q_int)
    
    # 5. u2 = (r * w) mod q 繧定ｨ育ｮ・
    let u2 = toBytesLE((r_int * fromBytesLE(w)) mod q_int)
    
    # 6. v = ((g^u1 * y^u2) mod p) mod q 繧定ｨ育ｮ・
    let v1 = powMod(g, u1, p)
    let v2 = powMod(y, u2, p)
    let v3 = toBytesLE((fromBytesLE(v1) * fromBytesLE(v2)) mod fromBytesLE(p))
    let v = toBytesLE(fromBytesLE(v3) mod q_int)
    
    # 7. v == r 繧堤｢ｺ隱・
    return fromBytesLE(v) == r_int
  except:
    echo "DSA鄂ｲ蜷肴､懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
    return false

proc verify*(ctx: ECDSAVerifyContext, signedData: string, signature: string): bool =
  ## ECDSA鄂ｲ蜷阪・讀懆ｨｼ
  try:

    var hashFunc: proc(data: string): string
    var digestSize: int
    
    case ctx.algorithm
    of ECDSA_P256_SHA256:
      hashFunc = calculateDigestSHA256
      digestSize = 32  # SHA-256 縺ｯ 32繝舌う繝・
    of ECDSA_P384_SHA384:
      hashFunc = calculateDigestSHA384
      digestSize = 48  # SHA-384 縺ｯ 48繝舌う繝・
    else:
      echo "繧ｵ繝昴・繝医＆繧後※縺・↑縺ЕCDSA繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝: ", ctx.algorithm
      return false
    
    # 鄂ｲ蜷阪ョ繝ｼ繧ｿ繧偵ワ繝・す繝･蛹・
    let hash = hashFunc(signedData)
    
    # ECDSA鄂ｲ蜷阪・r|s縺ｮ蠖｢蠑・(RFC 6605)
    if signature.len != 2 * digestSize:
      echo "ECDSA鄂ｲ蜷阪・髟ｷ縺輔′辟｡蜉ｹ縺ｧ縺吶よ悄蠕・ ", 2 * digestSize, ", 螳滄圀: ", signature.len
      return false
    
    # 鄂ｲ蜷阪ｒr縺ｨs縺ｫ蛻・ｧ｣
    var r = newSeq[byte](digestSize)
    var s = newSeq[byte](digestSize)
    
    for i in 0..<digestSize:
      r[i] = byte(signature[i])
    
    for i in 0..<digestSize:
      s[i] = byte(signature[digestSize + i])
    
    # ECDSA蜈ｬ髢矩嵯繧偵ヱ繝ｼ繧ｹ
    # 蜈ｬ髢矩嵯縺ｯ0x04 + x蠎ｧ讓・+ y蠎ｧ讓吶・蠖｢蠑・(RFC 6605)
    if ctx.publicKey.len < 1 + 2 * digestSize:
      echo "ECDSA蜈ｬ髢矩嵯縺ｮ髟ｷ縺輔′辟｡蜉ｹ縺ｧ縺吶よ悄蠕・ >= ", 1 + 2 * digestSize, ", 螳滄圀: ", ctx.publicKey.len
      return false
    
    if byte(ctx.publicKey[0]) != 0x04:
      echo "ECDSA蜈ｬ髢矩嵯縺ｮ蠖｢蠑上′辟｡蜉ｹ縺ｧ縺吶よ悄蠕・ 0x04, 螳滄圀: ", byte(ctx.publicKey[0])
      return false
    
    # X, Y蠎ｧ讓吶ｒ謚ｽ蜃ｺ
    var x = newSeq[byte](digestSize)
    var y = newSeq[byte](digestSize)
    
    for i in 0..<digestSize:
      x[i] = byte(ctx.publicKey[1 + i])
    
    for i in 0..<digestSize:
      y[i] = byte(ctx.publicKey[1 + digestSize + i])
    
    # nimcrypto繝ｩ繧､繝悶Λ繝ｪ繧剃ｽｿ逕ｨ縺励※ECDSA讀懆ｨｼ繧貞ｮ溯｡・
    var curve: EcCurve
    var n: BigInt
    
    case ctx.algorithm
    of ECDSA_P256_SHA256:
      curve = ecCurveP256()
      n = ecOrderP256()
    of ECDSA_P384_SHA384:
      curve = ecCurveP384()
      n = ecOrderP384()
    else:
      echo "繧ｵ繝昴・繝医＆繧後※縺・↑縺ЕCDSA繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝: ", ctx.algorithm
      return false
    
    # 1. r縺ｨs縺・縲從-1縺ｮ遽・峇縺ｫ縺ゅｋ縺狗｢ｺ隱・
    let rBigInt = bytesToBigInt(r)
    let sBigInt = bytesToBigInt(s)
    
    if rBigInt <= 0 or rBigInt >= n or sBigInt <= 0 or sBigInt >= n:
      echo "ECDSA鄂ｲ蜷阪ヱ繝ｩ繝｡繝ｼ繧ｿr縺ｾ縺溘・s縺梧怏蜉ｹ遽・峇螟悶〒縺・
      return false
    
    # 2. e = HASH(m)縺ｯ譌｢縺ｫ險育ｮ玲ｸ医∩ (hash螟画焚)
    let e = bytesToBigInt(hash)
    
    # 3. w = s^-1 mod n繧定ｨ育ｮ・
    let w = modInverse(sBigInt, n)
    if w == 0:
      echo "ECDSA鄂ｲ蜷肴､懆ｨｼ荳ｭ縺ｫ繝｢繧ｸ繝･繝ｩ騾・焚縺ｮ險育ｮ励↓螟ｱ謨励＠縺ｾ縺励◆"
      return false
    
    # 4. u1 = e * w mod n縺ｨu2 = r * w mod n繧定ｨ育ｮ・
    let u1 = (e * w) mod n
    let u2 = (rBigInt * w) mod n
    
    # 5. (x1, y1) = u1 * G + u2 * Q繧定ｨ育ｮ・
    # G 縺ｯ繝吶・繧ｹ繝昴う繝ｳ繝医＿ 縺ｯ蜈ｬ髢矩嵯繝昴う繝ｳ繝・
    let G = curve.generator()
    let Q = EcPoint(x: bytesToBigInt(x), y: bytesToBigInt(y))
    
    # 蜈ｬ髢矩嵯繝昴う繝ｳ繝医′譖ｲ邱壻ｸ翫↓縺ゅｋ縺薙→繧堤｢ｺ隱・
    if not curve.isOnCurve(Q):
      echo "ECDSA蜈ｬ髢矩嵯縺梧欠螳壹＆繧後◆讌募・譖ｲ邱壻ｸ翫↓縺ゅｊ縺ｾ縺帙ｓ"
      return false
    
    # u1*G 縺ｮ險育ｮ・
    let point1 = curve.multiplyPoint(G, u1)
    
    # u2*Q 縺ｮ險育ｮ・
    let point2 = curve.multiplyPoint(Q, u2)
    
    # 轤ｹ縺ｮ蜉邂・ (x1,y1) = u1*G + u2*Q
    let resultPoint = curve.addPoints(point1, point2)
    
    # 辟｡髯宣□轤ｹ縺ｮ蝣ｴ蜷医・讀懆ｨｼ螟ｱ謨・
    if resultPoint.isInfinity:
      echo "ECDSA鄂ｲ蜷肴､懆ｨｼ縺ｫ螟ｱ謨・ 邨先棡縺檎┌髯宣□轤ｹ縺ｧ縺・
      return false
    
    # 6. 讀懆ｨｼ: r 竕｡ x1 (mod n)
    let v = resultPoint.x mod n
    
    return v == rBigInt
  except:
    echo "ECDSA鄂ｲ蜷肴､懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
    return false

proc verify*(ctx: EdDSAVerifyContext, signedData: string, signature: string): bool =
  ## EdDSA鄂ｲ蜷阪・讀懆ｨｼ
  try:
    var signatureSize, keySize: int
    
    case ctx.algorithm
    of ED25519:
      # Ed25519: 32繝舌う繝亥・髢矩嵯, 64繝舌う繝育ｽｲ蜷・
      signatureSize = 64
      keySize = 32
    of ED448:
      # Ed448: 57繝舌う繝亥・髢矩嵯, 114繝舌う繝育ｽｲ蜷・
      signatureSize = 114
      keySize = 57
    else:
      echo "繧ｵ繝昴・繝医＆繧後※縺・↑縺ЕdDSA繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝: ", ctx.algorithm
      return false
    
    # 鄂ｲ蜷阪し繧､繧ｺ縺ｮ繝√ぉ繝・け
    if signature.len != signatureSize:
      echo "EdDSA鄂ｲ蜷阪・髟ｷ縺輔′辟｡蜉ｹ縺ｧ縺吶よ悄蠕・ ", signatureSize, ", 螳滄圀: ", signature.len
      return false
    
    # 蜈ｬ髢矩嵯繧ｵ繧､繧ｺ縺ｮ繝√ぉ繝・け
    if ctx.publicKey.len != keySize:
      echo "EdDSA蜈ｬ髢矩嵯縺ｮ髟ｷ縺輔′辟｡蜉ｹ縺ｧ縺吶よ悄蠕・ ", keySize, ", 螳滄圀: ", ctx.publicKey.len
      return false
    
    # Ed25519/Ed448縺ｮ讀懆ｨｼ
    if ctx.algorithm == ED25519:
      var pk = newSeq[byte](keySize)
      var sig = newSeq[byte](signatureSize)
      var msg = newSeq[byte](signedData.len)
      
      # 繝舌う繝磯・蛻励↓螟画鋤
      copyMem(addr pk[0], unsafeAddr ctx.publicKey[0], keySize)
      copyMem(addr sig[0], unsafeAddr signature[0], signatureSize)
      copyMem(addr msg[0], unsafeAddr signedData[0], signedData.len)
      
      # nimcrypto縺ｮEd25519讀懆ｨｼ髢｢謨ｰ繧剃ｽｿ逕ｨ
      try:
        var pubKey: ed25519.PublicKey
        var sig25519: ed25519.Signature
        
        # 蜈ｬ髢矩嵯縺ｨ繧ｷ繧ｰ繝阪メ繝｣繧偵さ繝斐・
        copyMem(addr pubKey[0], addr pk[0], keySize)
        copyMem(addr sig25519[0], addr sig[0], signatureSize)
        
        # 鄂ｲ蜷阪ｒ讀懆ｨｼ
        return ed25519.verify(sig25519, msg, msg.len, pubKey)
      except:
        echo "Ed25519讀懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
        return false
    
    # ED448縺ｮ蝣ｴ蜷・
    elif ctx.algorithm == ED448:
      var pk = newSeq[byte](keySize)
      var sig = newSeq[byte](signatureSize)
      var msg = newSeq[byte](signedData.len)
      
      # 繝舌う繝磯・蛻励↓螟画鋤
      copyMem(addr pk[0], unsafeAddr ctx.publicKey[0], keySize)
      copyMem(addr sig[0], unsafeAddr signature[0], signatureSize)
      copyMem(addr msg[0], unsafeAddr signedData[0], signedData.len)
      
      # Ed448縺ｮ讀懆ｨｼ螳溯｣・
      # RFC 8032縺ｫ蝓ｺ縺･縺・◆Ed448縺ｮ螳溯｣・
      try:
        # Ed448蟆ら畑縺ｮ讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝医ｒ貅門ｙ
        var pubKey: Ed448PublicKey
        var signature: Ed448Signature
        
        # 蜈ｬ髢矩嵯縺ｨ繧ｷ繧ｰ繝阪メ繝｣繧帝←蛻・↑蠖｢蠑上↓繧ｳ繝斐・
        if pk.len != Ed448_PUBLIC_KEY_SIZE:
          echo "Ed448蜈ｬ髢矩嵯繧ｵ繧､繧ｺ縺檎┌蜉ｹ縺ｧ縺・ ", pk.len
          return false
          
        if sig.len != Ed448_SIGNATURE_SIZE:
          echo "Ed448鄂ｲ蜷阪し繧､繧ｺ縺檎┌蜉ｹ縺ｧ縺・ ", sig.len
          return false
        
        copyMem(addr pubKey[0], addr pk[0], Ed448_PUBLIC_KEY_SIZE)
        copyMem(addr signature[0], addr sig[0], Ed448_SIGNATURE_SIZE)
        
        # 繧ｳ繝ｳ繝・く繧ｹ繝域枚蟄怜・・・NSSEC縺ｧ縺ｯ騾壼ｸｸ遨ｺ・・
        let context = ""
        
        # Ed448鄂ｲ蜷肴､懆ｨｼ
        # SHAKE256-912繝上ャ繧ｷ繝･髢｢謨ｰ繧剃ｽｿ逕ｨ
        var verified = ed448.verify(
          signature = signature,
          message = msg,
          msgLen = msg.len,
          publicKey = pubKey,
          context = context,
          contextLen = 0
        )
        
        # 讀懆ｨｼ邨先棡繧定ｿ斐☆
        return verified
      except CatchableError as e:
        echo "Ed448讀懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", e.msg
        return false
      except:
        echo "Ed448讀懆ｨｼ荳ｭ縺ｫ莠域悄縺励↑縺・お繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆"
        return false
    return false
  except:
    echo "EdDSA鄂ｲ蜷肴､懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
    return false

proc verifyRrsigRsa*(rrsig: RrsigRecord, signedData: string, key: DnsKeyRecord): bool =
  ## RSA鄂ｲ蜷阪・讀懆ｨｼ繝ｩ繝・ヱ繝ｼ
  try:
    # RSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝医ｒ菴懈・
    var ctx = RSAVerifyContext(
      publicKey: key.publicKey,
      algorithm: rrsig.algorithm
    )
    
    # 鄂ｲ蜷阪ｒ讀懆ｨｼ
    return ctx.verify(signedData, rrsig.signature)
  except:
    echo "RSA鄂ｲ蜷肴､懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
    return false

proc verifyRrsigDsa*(rrsig: RrsigRecord, signedData: string, key: DnsKeyRecord): bool =
  ## DSA鄂ｲ蜷阪・讀懆ｨｼ繝ｩ繝・ヱ繝ｼ
  try:
    # DSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝医ｒ菴懈・
    var ctx = DSAVerifyContext(
      publicKey: key.publicKey,
      algorithm: rrsig.algorithm
    )
    
    # 鄂ｲ蜷阪ｒ讀懆ｨｼ
    return ctx.verify(signedData, rrsig.signature)
  except:
    echo "DSA鄂ｲ蜷肴､懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
    return false

proc verifyRrsigEcdsa*(rrsig: RrsigRecord, signedData: string, key: DnsKeyRecord): bool =
  ## ECDSA鄂ｲ蜷阪・讀懆ｨｼ繝ｩ繝・ヱ繝ｼ
  try:
    # ECDSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝医ｒ菴懈・
    var ctx = ECDSAVerifyContext(
      publicKey: key.publicKey,
      algorithm: rrsig.algorithm
    )
    
    # 鄂ｲ蜷阪ｒ讀懆ｨｼ
    return ctx.verify(signedData, rrsig.signature)
  except:
    echo "ECDSA鄂ｲ蜷肴､懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
    return false

proc verifyRrsigEdDsa*(rrsig: RrsigRecord, signedData: string, key: DnsKeyRecord): bool =
  ## EdDSA鄂ｲ蜷阪・讀懆ｨｼ繝ｩ繝・ヱ繝ｼ
  try:
    # EdDSA讀懆ｨｼ繧ｳ繝ｳ繝・く繧ｹ繝医ｒ菴懈・
    var ctx = EdDSAVerifyContext(
      publicKey: key.publicKey,
      algorithm: rrsig.algorithm
    )
    
    # 鄂ｲ蜷阪ｒ讀懆ｨｼ
    return ctx.verify(signedData, rrsig.signature)
  except:
    echo "EdDSA鄂ｲ蜷肴､懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
    return false

proc createCanonicalRRSet*(records: seq[DnsRecord], rrsig: RrsigRecord): string =
  ## 豁｣隕丞喧縺輔ｌ縺欒R繧ｻ繝・ヨ繧剃ｽ懈・ (RFC 4034, Section 6)
  var result = ""
  
  # 繝ｬ繧ｳ繝ｼ繝峨ｒ繧ｽ繝ｼ繝・
  var sortedRecords = records
  sortedRecords.sort(proc(a, b: DnsRecord): int =
    result = cmp(a.name.toLower, b.name.toLower)
    if result == 0:
      result = cmp(a.`type`, b.`type`)
    if result == 0:
      result = cmp(a.class, b.class)
    return result
  )
  
  # 豁｣隕丞喧縺輔ｌ縺溘Ρ繧､繝､繝ｼ繝輔か繝ｼ繝槭ャ繝医ｒ菴懈・
  for record in sortedRecords:
    if record.`type` == rrsig.typeCovered:
      var rrWire = ""
      # 謇譛芽・錐
      rrWire.add(record.name.toLower)
      # 繧ｿ繧､繝励√け繝ｩ繧ｹ縲ゝTL
      rrWire.add(char((record.`type` shr 8) and 0xFF))
      rrWire.add(char(record.`type` and 0xFF))
      rrWire.add(char((record.class shr 8) and 0xFF))
      rrWire.add(char(record.class and 0xFF))
      rrWire.add(char((rrsig.originalTtl shr 24) and 0xFF))
      rrWire.add(char((rrsig.originalTtl shr 16) and 0xFF))
      rrWire.add(char((rrsig.originalTtl shr 8) and 0xFF))
      rrWire.add(char(rrsig.originalTtl and 0xFF))
      # RDATA
      rrWire.add(record.rdata)
      
      result.add(rrWire)
  
  return result

proc createRRSigData*(rrsig: RrsigRecord, canonicalRRSet: string): string =
  ## RRSIG鄂ｲ蜷阪ョ繝ｼ繧ｿ繧剃ｽ懈・ (RFC 4034, Section 3.1.8.1)
  var result = ""
  
  # RRSIG RDATA (鄂ｲ蜷阪ヵ繧｣繝ｼ繝ｫ繝峨ｒ髯､縺・
  result.add(char((rrsig.typeCovered shr 8) and 0xFF))
  result.add(char(rrsig.typeCovered and 0xFF))
  result.add(char(rrsig.algorithm))
  result.add(char(rrsig.labels))
  
  # 繧ｪ繝ｪ繧ｸ繝翫ΝTTL
  result.add(char((rrsig.originalTtl shr 24) and 0xFF))
  result.add(char((rrsig.originalTtl shr 16) and 0xFF))
  result.add(char((rrsig.originalTtl shr 8) and 0xFF))
  result.add(char(rrsig.originalTtl and 0xFF))
  
  # 鄂ｲ蜷肴怏蜉ｹ譛滄剞
  let expiration = uint32(rrsig.signatureExpiration.toUnix())
  result.add(char((expiration shr 24) and 0xFF))
  result.add(char((expiration shr 16) and 0xFF))
  result.add(char((expiration shr 8) and 0xFF))
  result.add(char(expiration and 0xFF))
  
  # 鄂ｲ蜷埼幕蟋区凾髢・
  let inception = uint32(rrsig.signatureInception.toUnix())
  result.add(char((inception shr 24) and 0xFF))
  result.add(char((inception shr 16) and 0xFF))
  result.add(char((inception shr 8) and 0xFF))
  result.add(char(inception and 0xFF))
  
  # 繧ｭ繝ｼ繧ｿ繧ｰ
  result.add(char((rrsig.keyTag shr 8) and 0xFF))
  result.add(char(rrsig.keyTag and 0xFF))
  
  # 鄂ｲ蜷崎・錐
  result.add(rrsig.signerName.toLower)
  
  # 豁｣隕丞喧縺輔ｌ縺欒R繧ｻ繝・ヨ繧定ｿｽ蜉
  result.add(canonicalRRSet)
  
  return result

proc verifyRrsig*(rrsig: RrsigRecord, records: seq[DnsRecord], keys: seq[DnsKeyRecord]): bool =
  ## RRSIG讀懆ｨｼ繧貞ｮ溯｣・(RFC 4034)
  # 鄂ｲ蜷阪・譛牙柑譛滄剞繝√ぉ繝・け
  let now = getTime().toUnix().uint32
  if now > uint32(rrsig.signatureExpiration.toUnix()) or now < uint32(rrsig.signatureInception.toUnix()):
    echo "鄂ｲ蜷阪・譛牙柑譛滄剞螟・(迴ｾ蝨ｨ: ", now, ", 譛牙柑譛滄剞: ", uint32(rrsig.signatureExpiration.toUnix()), 
         ", 髢句ｧ区凾髢・ ", uint32(rrsig.signatureInception.toUnix()), ")"
    return false
  
  # 蟇ｾ蠢懊☆繧汽NSKEY繧定ｦ九▽縺代ｋ
  var matchingKey: DnsKeyRecord = nil
  for key in keys:
    if calculateKeyTag(key) == rrsig.keyTag and 
       key.algorithm == rrsig.algorithm and
       isZoneKey(key):
      matchingKey = key
      break
  
  if matchingKey == nil:
    echo "蟇ｾ蠢懊☆繧汽NSKEY縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ (繧ｭ繝ｼ繧ｿ繧ｰ: ", rrsig.keyTag, ", 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝: ", rrsig.algorithm, ")"
    return false
  
  # 豁｣隕丞喧縺輔ｌ縺欒R繧ｻ繝・ヨ繧剃ｽ懈・
  let canonicalRRSet = createCanonicalRRSet(records, rrsig)
  
  # 鄂ｲ蜷阪ョ繝ｼ繧ｿ繧剃ｽ懈・
  let signedData = createRRSigData(rrsig, canonicalRRSet)
  
  # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｫ蝓ｺ縺･縺・※鄂ｲ蜷阪ｒ讀懆ｨｼ
  case rrsig.algorithm
  of 1, 5, 7, 8, 10:  # RSA邉ｻ (RSA/SHA1, RSA/SHA-256, RSA/SHA-512縺ｪ縺ｩ)
    return verifyRrsigRsa(rrsig, signedData, matchingKey)
  of 3, 6:  # DSA邉ｻ
    return verifyRrsigDsa(rrsig, signedData, matchingKey)
  of 13, 14:  # ECDSA邉ｻ (ECDSA Curve P-256 with SHA-256, ECDSA Curve P-384 with SHA-384)
    return verifyRrsigEcdsa(rrsig, signedData, matchingKey)
  of 15, 16:  # Ed25519, Ed448
    return verifyRrsigEdDsa(rrsig, signedData, matchingKey)
  else:
    echo "繧ｵ繝昴・繝医＆繧後※縺・↑縺・い繝ｫ繧ｴ繝ｪ繧ｺ繝: ", rrsig.algorithm
    return false  # 繧ｵ繝昴・繝医＆繧後※縺・↑縺・い繝ｫ繧ｴ繝ｪ繧ｺ繝

proc verifyChain*(validator: DnssecValidator, domain: string, records: seq[DnsRecord], 
                  rrsigs: seq[RrsigRecord]): DnssecStatus =
  ## 菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ縺ｮ讀懆ｨｼ
  var currentDomain = domain
  
  # 繝・ヰ繝・げ諠・ｱ
  echo "繝峨Γ繧､繝ｳ ", domain, " 縺ｮ菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ繧呈､懆ｨｼ荳ｭ"
  
  # 繝峨Γ繧､繝ｳ髫主ｱ､繧偵◆縺ｩ縺｣縺ｦ讀懆ｨｼ
  while true:
    # 迴ｾ蝨ｨ縺ｮ繝峨Γ繧､繝ｳ縺ｮ繧ｭ繝ｼ繧貞叙蠕・
    if not validator.keyRecords.hasKey(currentDomain):
      echo "繝峨Γ繧､繝ｳ ", currentDomain, " 縺ｮ繧ｭ繝ｼ繝ｬ繧ｳ繝ｼ繝峨′縺ゅｊ縺ｾ縺帙ｓ"
      return Indeterminate
    
    let keys = validator.keyRecords[currentDomain]
    echo "繝峨Γ繧､繝ｳ ", currentDomain, " 縺ｫ縺ｯ ", keys.len, " 蛟九・繧ｭ繝ｼ縺後≠繧翫∪縺・
    
    # 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｫ縺溘←繧顔捩縺・◆蝣ｴ蜷・
    if validator.trustAnchors.hasKey(currentDomain):
      let trustKeys = validator.trustAnchors[currentDomain]
      echo "繝峨Γ繧､繝ｳ ", currentDomain, " 縺ｯ菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｧ縺・(", trustKeys.len, " 繧ｭ繝ｼ)"
      
      # 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｨ荳閾ｴ縺吶ｋ繧ｭ繝ｼ縺後≠繧九°遒ｺ隱・
      for key in keys:
        for trustKey in trustKeys:
          if key.publicKey == trustKey.publicKey and 
             key.algorithm == trustKey.algorithm:
            echo "菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｨ荳閾ｴ縺吶ｋ繧ｭ繝ｼ繧定ｦ九▽縺代∪縺励◆"
            
            # RRSIG繧呈､懆ｨｼ
            for rrsig in rrsigs:
              if rrsig.signerName == currentDomain:
                echo "鄂ｲ蜷崎・", rrsig.signerName, " 縺ｮRRSIG繧呈､懆ｨｼ荳ｭ"
                if verifyRrsig(rrsig, records, keys):
                  echo "RRSIG讀懆ｨｼ謌仙粥"
                  return Secure
                else:
                  echo "RRSIG讀懆ｨｼ螟ｱ謨・
            
            echo "譛牙柑縺ｪRRSIG縺後≠繧翫∪縺帙ｓ"
      
      echo "菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｫ蛻ｰ驕斐＠縺溘′讀懆ｨｼ螟ｱ謨・
      return Bogus  # 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｫ蛻ｰ驕斐＠縺溘′讀懆ｨｼ螟ｱ謨・
    
    # 隕ｪ繝峨Γ繧､繝ｳ縺ｮDS繝ｬ繧ｳ繝ｼ繝峨ｒ遒ｺ隱・
    let parts = currentDomain.split('.')
    if parts.len <= 1:
      echo "繝ｫ繝ｼ繝医ラ繝｡繧､繝ｳ縺ｫ蛻ｰ驕斐＠縺ｾ縺励◆縺御ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｯ縺ゅｊ縺ｾ縺帙ｓ"
      return Insecure  # 繝ｫ繝ｼ繝医ラ繝｡繧､繝ｳ縺ｫ蛻ｰ驕斐＠縲∽ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺後↑縺・
    
    let parentDomain = parts[1..^1].join(".")
    echo "隕ｪ繝峨Γ繧､繝ｳ: ", parentDomain
    
    if not validator.dsRecords.hasKey(currentDomain):
      echo "繝峨Γ繧､繝ｳ ", currentDomain, " 縺ｮDS繝ｬ繧ｳ繝ｼ繝峨′縺ゅｊ縺ｾ縺帙ｓ"
      return Indeterminate  # 隕ｪ繝峨Γ繧､繝ｳ縺ｮDS繝ｬ繧ｳ繝ｼ繝峨′縺ｪ縺・
    
    let dsRecords = validator.dsRecords[currentDomain]
    echo currentDomain, " 縺ｫ縺ｯ ", dsRecords.len, " 蛟九・DS繝ｬ繧ｳ繝ｼ繝峨′縺ゅｊ縺ｾ縺・
    
    # DS繝ｬ繧ｳ繝ｼ繝峨→DNSKEY縺ｮ讀懆ｨｼ
    var dsVerified = false
    for ds in dsRecords:
      for key in keys:
        if verifyDsRecord(ds, key, currentDomain):
          echo "DS繝ｬ繧ｳ繝ｼ繝画､懆ｨｼ謌仙粥: 繧ｭ繝ｼ繧ｿ繧ｰ ", ds.keyTag
          dsVerified = true
          break
      if dsVerified:
        break
    
    if not dsVerified:
      echo "DS繝ｬ繧ｳ繝ｼ繝画､懆ｨｼ螟ｱ謨・
      return Bogus  # DS繝ｬ繧ｳ繝ｼ繝画､懆ｨｼ螟ｱ謨・
    
    # 隕ｪ繝峨Γ繧､繝ｳ縺ｸ
    currentDomain = parentDomain
    echo "隕ｪ繝峨Γ繧､繝ｳ ", currentDomain, " 縺ｫ遘ｻ蜍・
  
  echo "騾壼ｸｸ縺薙％縺ｫ縺ｯ蛻ｰ驕斐＠縺ｪ縺・
  return Indeterminate  # 騾壼ｸｸ縺薙％縺ｫ縺ｯ蛻ｰ驕斐＠縺ｪ縺・

proc validateRecord*(validator: DnssecValidator, record: DnsRecord, 
                     rrsigs: seq[RrsigRecord]): DnssecStatus =
  ## 蜊倅ｸ縺ｮDNS繝ｬ繧ｳ繝ｼ繝峨ｒ讀懆ｨｼ
  return validator.verifyChain(record.domain, @[record], rrsigs)

proc validateRecords*(validator: DnssecValidator, records: seq[DnsRecord], 
                      rrsigs: seq[RrsigRecord]): DnssecStatus =
  ## DNS繝ｬ繧ｳ繝ｼ繝峨・繧ｻ繝・ヨ繧呈､懆ｨｼ
  if records.len == 0:
    return Indeterminate
  
  let domain = records[0].domain
  return validator.verifyChain(domain, records, rrsigs)

# NSEC, NSEC3髢｢騾｣縺ｮ讖溯・
proc matchesNsec*(domain: string, nsecRecord: NsecRecord): bool =
  ## 繝峨Γ繧､繝ｳ縺君SEC繝ｬ繧ｳ繝ｼ繝峨・遽・峇縺ｫ蜷ｫ縺ｾ繧後ｋ縺九ｒ遒ｺ隱・
  let lowerDomain = domain.toLower()
  let lowerOwner = nsecRecord.nextDomainName.toLower()
  
  # 繝峨Γ繧､繝ｳ縺君SEC縺ｮ謇譛芽・→谺｡縺ｮ繝峨Γ繧､繝ｳ蜷阪・髢薙↓縺ゅｋ縺狗｢ｺ隱・
  if lowerDomain > lowerOwner and (nsecRecord.nextDomainName.len == 0 or lowerDomain < nsecRecord.nextDomainName.toLower()):
    return true
  return false

proc calculateNsec3Hash*(domain: string, salt: string, iterations: uint16, algorithm: uint8): string =
  ## NSEC3繝上ャ繧ｷ繝･繧定ｨ育ｮ・(RFC 5155)
  if algorithm != 1:
    # 迴ｾ蝨ｨ縺ｯSHA-1縺ｮ縺ｿ繧ｵ繝昴・繝・
    return ""
  
  # 豁｣隕丞喧縺輔ｌ縺溘ラ繝｡繧､繝ｳ蜷阪ｒ貅門ｙ
  var normalizedDomain = domain.toLower()
  
  # 繝峨Γ繧､繝ｳ蜷阪ｒ繝ｯ繧､繝､繝ｼ繝輔か繝ｼ繝槭ャ繝医↓螟画鋤
  var wireFormat = ""
  let labels = normalizedDomain.split('.')
  for label in labels:
    if label.len > 0:
      wireFormat.add(char(label.len))
      wireFormat.add(label)
  
  # 譛ｫ蟆ｾ縺ｮroot繝ｩ繝吶Ν
  wireFormat.add(char(0))
  
  # 譛蛻昴・繝上ャ繧ｷ繝･險育ｮ・
  var hashValue = calculateDigestSHA1(wireFormat)
  
  # 郢ｰ繧願ｿ斐＠繝上ャ繧ｷ繝･繧定ｨ育ｮ・
  for i in 0..<iterations:
    var data = hashValue & salt
    hashValue = calculateDigestSHA1(data)
  
  # Base32Hex 繧ｨ繝ｳ繧ｳ繝ｼ繝・(RFC 4648)
  const BASE32HEX = "0123456789ABCDEFGHIJKLMNOPQRSTUV"
  var encoded = ""
  var i = 0
  
  while i < hashValue.len:
    var buffer: uint64 = 0
    var bitsLeft = 0
    
    # 5繝薙ャ繝医＃縺ｨ縺ｫ蜃ｦ逅・
    while bitsLeft < 40 and i < hashValue.len:
      buffer = buffer shl 8 or uint64(byte(hashValue[i]))
      bitsLeft += 8
      i += 1
    
    # 繝舌ャ繝輔ぃ縺ｫ蜊∝・縺ｪ繝薙ャ繝医′縺ゅｋ髢薙。ase32Hex譁・ｭ励ｒ蜃ｺ蜉・
    bitsLeft -= 5
    while bitsLeft >= 0:
      let index = int((buffer shr bitsLeft) and 0x1F)
      encoded.add(BASE32HEX[index])
      bitsLeft -= 5
  
  return encoded

proc verifyNsec3Record*(domain: string, nsec3Record: Nsec3Record, recordType: DnsRecordType): bool =
  ## NSEC3繝ｬ繧ｳ繝ｼ繝峨ｒ菴ｿ逕ｨ縺励※繝峨Γ繧､繝ｳ縺ｮ髱槫ｭ伜惠繧呈､懆ｨｼ
  try:
    # 繝峨Γ繧､繝ｳ蜷阪・繝上ャ繧ｷ繝･繧定ｨ育ｮ・
    let domainHash = calculateNsec3Hash(domain, nsec3Record.salt, nsec3Record.iterations, nsec3Record.hashAlgorithm)
    if domainHash.len == 0:
      echo "NSEC3繝上ャ繧ｷ繝･縺ｮ險育ｮ励↓螟ｱ謨励＠縺ｾ縺励◆"
      return false
    
    # 螳悟・荳閾ｴ繧堤｢ｺ隱搾ｼ医Ξ繧ｳ繝ｼ繝峨・蟄伜惠繧堤､ｺ縺吝庄閭ｽ諤ｧ縺後≠繧具ｼ・
    if domainHash == nsec3Record.nextHashedOwner:
      return recordType in nsec3Record.typeBitMaps
    
    # NSEC3繝ｬ繧ｳ繝ｼ繝峨′繝峨Γ繧､繝ｳ縺ｮ髱槫ｭ伜惠繧定ｨｼ譏弱☆繧九°遒ｺ隱・
    let ownerNameHash = nsec3Record.nextHashedOwner
    let nextOwnerNameHash = nsec3Record.nextHashedOwner
    
    # 譛ｫ蟆ｾ縺後Ν繝ｼ繝励☆繧九こ繝ｼ繧ｹ
    if ownerNameHash > nextOwnerNameHash:
      if domainHash > ownerNameHash or domainHash < nextOwnerNameHash:
        # 繝峨Γ繧､繝ｳ繝上ャ繧ｷ繝･縺ｯ遽・峇蜀・- 髱槫ｭ伜惠繧定ｨｼ譏・
        return true
    else:
      # 騾壼ｸｸ縺ｮ繧ｱ繝ｼ繧ｹ
      if domainHash > ownerNameHash and domainHash < nextOwnerNameHash:
        # 繝峨Γ繧､繝ｳ繝上ャ繧ｷ繝･縺ｯ遽・峇蜀・- 髱槫ｭ伜惠繧定ｨｼ譏・
        return true
    
    return false
  except:
    echo "NSEC3讀懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
    return false

proc optimizeNsec3Parameters*(iterations: uint16, saltLength: int): (uint16, int) =
  ## NSEC3繝代Λ繝｡繝ｼ繧ｿ繧呈怙驕ｩ蛹厄ｼ・FC 9276縺ｫ蝓ｺ縺･縺擾ｼ・
  ## 霑斐ｊ蛟､: (譛驕ｩ蛹悶＆繧後◆蜿榊ｾｩ蝗樊焚, 謗ｨ螂ｨ縺輔ｌ繧九た繝ｫ繝磯聞)
  # RFC 9276縺ｧ縺ｯ縲∝渚蠕ｩ蝗樊焚=0縺翫ｈ縺ｳ遏ｭ縺・た繝ｫ繝医∪縺溘・繧ｽ繝ｫ繝医↑縺励′謗ｨ螂ｨ縺輔ｌ縺ｦ縺・∪縺・
  let recommendedIterations: uint16 = 0
  let recommendedSaltLength = 0 # 繧ｽ繝ｫ繝医↑縺・
  
  return (recommendedIterations, recommendedSaltLength)

proc verifyNsecRecord*(domain: string, nsecRecord: NsecRecord, recordType: DnsRecordType): bool =
  ## NSEC繝ｬ繧ｳ繝ｼ繝峨ｒ菴ｿ逕ｨ縺励※繝峨Γ繧､繝ｳ縺ｮ髱槫ｭ伜惠繧呈､懆ｨｼ
  try:
    let domainLower = domain.toLower()
    let ownerLower = nsecRecord.nextDomainName.toLower()
    let nextLower = nsecRecord.nextDomainName.toLower()
    
    # 螳悟・荳閾ｴ繧堤｢ｺ隱搾ｼ医Ξ繧ｳ繝ｼ繝峨・蟄伜惠繧堤､ｺ縺吝庄閭ｽ諤ｧ縺後≠繧具ｼ・
    if domainLower == ownerLower:
      return recordType in nsecRecord.typeBitMaps
    
    # NSEC繝ｬ繧ｳ繝ｼ繝峨′繝峨Γ繧､繝ｳ縺ｮ髱槫ｭ伜惠繧定ｨｼ譏弱☆繧九°遒ｺ隱・
    if ownerLower < nextLower:
      # 騾壼ｸｸ縺ｮ繧ｱ繝ｼ繧ｹ
      if domainLower > ownerLower and domainLower < nextLower:
        # 繝峨Γ繧､繝ｳ縺ｯ遽・峇蜀・- 髱槫ｭ伜惠繧定ｨｼ譏・
        return true
    else:
      # 譛ｫ蟆ｾ縺後Ν繝ｼ繝励☆繧九こ繝ｼ繧ｹ・域怙蠕後・NSEC・・
      if domainLower > ownerLower or domainLower < nextLower:
        # 繝峨Γ繧､繝ｳ蜷阪・繧ｾ繝ｼ繝ｳ縺ｮ邨ゅｏ繧翫°繧牙ｧ九∪繧翫・髢薙↓縺ゅｋ - 髱槫ｭ伜惠繧定ｨｼ譏・
        return true
    
    return false
  except:
    echo "NSEC讀懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", getCurrentExceptionMsg()
    return false

proc hasNsecRecords*(records: seq[DnsRecord]): bool =
  ## NSEC繝ｬ繧ｳ繝ｼ繝峨・蟄伜惠繧堤｢ｺ隱・
  for record in records:
    if record.`type` == DnsRecordType.NSEC:
      return true
  return false

proc hasNsec3Records*(records: seq[DnsRecord]): bool =
  ## NSEC3繝ｬ繧ｳ繝ｼ繝峨・蟄伜惠繧堤｢ｺ隱・
  for record in records:
    if record.`type` == DnsRecordType.NSEC3:
      return true
  return false

proc extractNsecRecords*(records: seq[DnsRecord]): seq[NsecRecord] =
  ## 蠢懃ｭ斐°繧丑SEC繝ｬ繧ｳ繝ｼ繝峨ｒ謚ｽ蜃ｺ
  result = @[]
  for record in records:
    if record.`type` == DnsRecordType.NSEC:
      try:
        # NSEC繝ｬ繧ｳ繝ｼ繝峨・RDATA繧偵ヱ繝ｼ繧ｹ
        let nsec = parseNsecRecord(record.rdata, record.name)
        if nsec != nil:
          result.add(nsec)
      except Exception as e:
        echo "NSEC繝ｬ繧ｳ繝ｼ繝峨・繝代・繧ｹ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕・ ", e.msg

proc extractNsec3Records*(records: seq[DnsRecord]): seq[Nsec3Record] =
  ## 蠢懃ｭ斐°繧丑SEC3繝ｬ繧ｳ繝ｼ繝峨ｒ謚ｽ蜃ｺ
  result = @[]
  for record in records:
    if record.`type` == DnsRecordType.NSEC3:
      try:
        # NSEC3繝ｬ繧ｳ繝ｼ繝峨・RDATA繧偵ヱ繝ｼ繧ｹ
        let nsec3 = parseNsec3Record(record.rdata, record.name)
        if nsec3 != nil:
          result.add(nsec3)
      except Exception as e:
        echo "NSEC3繝ｬ繧ｳ繝ｼ繝峨・繝代・繧ｹ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕・ ", e.msg

proc validateNegativeResponse*(validator: DnssecValidator, qname: string, qtype: DnsRecordType, 
                              nsecRecords: seq[NsecRecord], nsec3Records: seq[Nsec3Record],
                              rrsigs: seq[RrsigRecord]): DnssecStatus =
  ## 蜷ｦ螳壼ｿ懃ｭ斐・讀懆ｨｼ・・SEC縺ｾ縺溘・NSEC3繧剃ｽｿ逕ｨ・・
  ## RFC 4035, Section 5.4 and RFC 5155, Section 8
  
  # NSEC縺ｫ繧医ｋ讀懆ｨｼ
  if nsecRecords.len > 0:
    var nsecMatched = false
    var validSignature = false
    
    # 蟆代↑縺上→繧・縺､縺ｮNSEC繝ｬ繧ｳ繝ｼ繝峨′蜷ｦ螳壼ｿ懃ｭ斐ｒ險ｼ譏弱☆繧九°遒ｺ隱・
    for nsec in nsecRecords:
      if verifyNsecRecord(qname, nsec, qtype):
        nsecMatched = true
        
        # 縺薙・NSEC繝ｬ繧ｳ繝ｼ繝峨↓蟇ｾ蠢懊☆繧騎RSIG繧呈､懃ｴ｢縺励※讀懆ｨｼ
        let nsecOwner = nsec.ownerName
        var nsecRecordSet: seq[DnsRecord] = @[]
        
        # NSEC繝ｬ繧ｳ繝ｼ繝峨ｒDnsRecord縺ｨ縺励※蜀肴ｧ狗ｯ・
        let nsecDnsRecord = createNsecDnsRecord(nsec)
        nsecRecordSet.add(nsecDnsRecord)
        
        # 蟇ｾ蠢懊☆繧騎RSIG繧呈､懃ｴ｢
        var matchingRrsigs: seq[RrsigRecord] = @[]
        for rrsig in rrsigs:
          if rrsig.typeCovered == DnsRecordType.NSEC and rrsig.signerName == nsecOwner:
            matchingRrsigs.add(rrsig)
        
        # 蟆代↑縺上→繧・縺､縺ｮ譛牙柑縺ｪ鄂ｲ蜷阪′縺ゅｋ縺狗｢ｺ隱・
        for rrsig in matchingRrsigs:
          if validator.verifyRrsig(rrsig, nsecRecordSet, validator.getDnskeys(rrsig.signerName)):
            validSignature = true
            break
        
        if validSignature:
          break
    
    if not nsecMatched:
      echo "NSEC繝ｬ繧ｳ繝ｼ繝峨′蜷ｦ螳壼ｿ懃ｭ斐ｒ險ｼ譏弱＠縺ｦ縺・∪縺帙ｓ: ", qname, " (", $qtype, ")"
      return DnssecStatus.Bogus
    
    if not validSignature:
      echo "NSEC繝ｬ繧ｳ繝ｼ繝峨・鄂ｲ蜷阪′辟｡蜉ｹ縺ｧ縺・ ", qname
      return DnssecStatus.Bogus
    
    return DnssecStatus.Secure
  
  # NSEC3縺ｫ繧医ｋ讀懆ｨｼ
  elif nsec3Records.len > 0:
    var nsec3Matched = false
    var validSignature = false
    
    # 蜷НSEC3繝ｬ繧ｳ繝ｼ繝峨ｒ讀懆ｨｼ
    for nsec3 in nsec3Records:
      if verifyNsec3Record(qname, nsec3, qtype):
        nsec3Matched = true
        
        # 縺薙・NSEC3繝ｬ繧ｳ繝ｼ繝峨↓蟇ｾ蠢懊☆繧騎RSIG繧呈､懃ｴ｢縺励※讀懆ｨｼ
        let nsec3Owner = nsec3.ownerName
        var nsec3RecordSet: seq[DnsRecord] = @[]
        
        # NSEC3繝ｬ繧ｳ繝ｼ繝峨ｒDnsRecord縺ｨ縺励※蜀肴ｧ狗ｯ・
        let nsec3DnsRecord = createNsec3DnsRecord(nsec3)
        nsec3RecordSet.add(nsec3DnsRecord)
        
        # 蟇ｾ蠢懊☆繧騎RSIG繧呈､懃ｴ｢
        var matchingRrsigs: seq[RrsigRecord] = @[]
        for rrsig in rrsigs:
          if rrsig.typeCovered == DnsRecordType.NSEC3 and rrsig.signerName == nsec3Owner:
            matchingRrsigs.add(rrsig)
        
        # 蟆代↑縺上→繧・縺､縺ｮ譛牙柑縺ｪ鄂ｲ蜷阪′縺ゅｋ縺狗｢ｺ隱・
        for rrsig in matchingRrsigs:
          if validator.verifyRrsig(rrsig, nsec3RecordSet, validator.getDnskeys(rrsig.signerName)):
            validSignature = true
            break
        
        if validSignature:
          break
    
    if not nsec3Matched:
      echo "NSEC3繝ｬ繧ｳ繝ｼ繝峨′蜷ｦ螳壼ｿ懃ｭ斐ｒ險ｼ譏弱＠縺ｦ縺・∪縺帙ｓ: ", qname, " (", $qtype, ")"
      return DnssecStatus.Bogus
    
    if not validSignature:
      echo "NSEC3繝ｬ繧ｳ繝ｼ繝峨・鄂ｲ蜷阪′辟｡蜉ｹ縺ｧ縺・ ", qname
      return DnssecStatus.Bogus
    
    return DnssecStatus.Secure
  
  # NSEC繧・SEC3繧りｦ九▽縺九ｉ縺ｪ縺・ｴ蜷・
  echo "蜷ｦ螳壼ｿ懃ｭ斐↓NSEC縺ｾ縺溘・NSEC3繝ｬ繧ｳ繝ｼ繝峨′縺ゅｊ縺ｾ縺帙ｓ: ", qname
  return DnssecStatus.Indeterminate

# DNSSEC讀懆ｨｼ縺ｮ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ譛驕ｩ蛹・
proc precomputeDnsKeyDigests*(validator: DnssecValidator) =
  ## DNSKEY繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ莠句燕險育ｮ励＠縺ｦ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ繧貞髄荳・
  validator.digestCache = initTable[string, string]()
  
  for domain, keys in validator.keyRecords:
    for key in keys:
      # 讒倥・↑繝繧､繧ｸ繧ｧ繧ｹ繝医い繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｧ繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ莠句燕險育ｮ・
      let sha1Digest = calculateDnsKeyDigest(key, DigestAlgorithm.SHA1, domain)
      let sha256Digest = calculateDnsKeyDigest(key, DigestAlgorithm.SHA256, domain)
      let sha384Digest = calculateDnsKeyDigest(key, DigestAlgorithm.SHA384, domain)
      
      # 繧ｭ繝｣繝・す繝･縺ｫ菫晏ｭ・
      let cacheKeySha1 = domain & "|" & $key.algorithm & "|" & $key.flags & "|" & $DigestAlgorithm.SHA1
      let cacheKeySha256 = domain & "|" & $key.algorithm & "|" & $key.flags & "|" & $DigestAlgorithm.SHA256
      let cacheKeySha384 = domain & "|" & $key.algorithm & "|" & $key.flags & "|" & $DigestAlgorithm.SHA384
      
      validator.digestCache[cacheKeySha1] = sha1Digest
      validator.digestCache[cacheKeySha256] = sha256Digest
      validator.digestCache[cacheKeySha384] = sha384Digest

proc getDnsKeyDigest*(validator: DnssecValidator, key: DnsKeyRecord, digestAlg: DigestAlgorithm, domain: string): string =
  ## 繧ｭ繝｣繝・す繝･縺九ｉDNSKEY繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ蜿門ｾ励√↑縺代ｌ縺ｰ險育ｮ・
  let cacheKey = domain & "|" & $key.algorithm & "|" & $key.flags & "|" & $digestAlg
  
  if cacheKey in validator.digestCache:
    return validator.digestCache[cacheKey]
  
  # 繧ｭ繝｣繝・す繝･縺ｫ縺ｪ縺・ｴ蜷医・險育ｮ励＠縺ｦ菫晏ｭ・
  let digest = calculateDnsKeyDigest(key, digestAlg, domain)
  validator.digestCache[cacheKey] = digest
  return digest

proc exportValidatorState*(validator: DnssecValidator): string =
  ## 讀懆ｨｼ繧ｨ繝ｳ繧ｸ繝ｳ縺ｮ迥ｶ諷九ｒJSON蠖｢蠑上〒繧ｨ繧ｯ繧ｹ繝昴・繝・
  var result = "{\n"
  
  # 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ
  result.add("  \"trustAnchors\": {\n")
  var domainCount = 0
  for domain, anchors in validator.trustAnchors:
    if domainCount > 0:
      result.add(",\n")
    result.add("    \"" & domain & "\": [\n")
    
    var anchorCount = 0
    for anchor in anchors:
      if anchorCount > 0:
        result.add(",\n")
      result.add("      {\n")
      result.add("        \"flags\": " & $anchor.flags & ",\n")
      result.add("        \"protocol\": " & $anchor.protocol & ",\n")
      result.add("        \"algorithm\": " & $anchor.algorithm & ",\n")
      result.add("        \"keyTag\": " & $calculateKeyTag(anchor) & ",\n")
      result.add("        \"publicKey\": \"" & encodeBase64(anchor.publicKey) & "\"\n")
      result.add("      }")
      anchorCount += 1
    
    result.add("\n    ]")
    domainCount += 1
  
  result.add("\n  },\n")
  
  # DS 繝ｬ繧ｳ繝ｼ繝・
  result.add("  \"dsRecords\": {\n")
  domainCount = 0
  for domain, dsRecs in validator.dsRecords:
    if domainCount > 0:
      result.add(",\n")
    result.add("    \"" & domain & "\": [\n")
    
    var recCount = 0
    for ds in dsRecs:
      if recCount > 0:
        result.add(",\n")
      result.add("      {\n")
      result.add("        \"keyTag\": " & $ds.keyTag & ",\n")
      result.add("        \"algorithm\": " & $ds.algorithm & ",\n")
      result.add("        \"digestType\": " & $ds.digestType & ",\n")
      result.add("        \"digest\": \"" & encodeHex(ds.digest) & "\"\n")
      result.add("      }")
      recCount += 1
    
    result.add("\n    ]")
    domainCount += 1
  
  result.add("\n  },\n")
  
  # DNSKEY 繝ｬ繧ｳ繝ｼ繝・
  result.add("  \"keyRecords\": {\n")
  domainCount = 0
  for domain, keys in validator.keyRecords:
    if domainCount > 0:
      result.add(",\n")
    result.add("    \"" & domain & "\": [\n")
    
    var keyCount = 0
    for key in keys:
      if keyCount > 0:
        result.add(",\n")
      result.add("      {\n")
      result.add("        \"flags\": " & $key.flags & ",\n")
      result.add("        \"protocol\": " & $key.protocol & ",\n")
      result.add("        \"algorithm\": " & $key.algorithm & ",\n")
      result.add("        \"keyTag\": " & $calculateKeyTag(key) & "\n")
      result.add("      }")
      keyCount += 1
    
    result.add("\n    ]")
    domainCount += 1
  
  result.add("\n  }\n")
  result.add("}")
  
  return result
proc importValidatorState*(validator: DnssecValidator, jsonState: string): bool =
  ## JSON縺九ｉ繝舌Μ繝・・繧ｿ迥ｶ諷九ｒ繧､繝ｳ繝昴・繝・
  try:
    let json = parseJson(jsonState)
    
    # 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧偵う繝ｳ繝昴・繝・
    if json.hasKey("trustAnchors"):
      for domain, anchors in json["trustAnchors"].getFields():
        for anchor in anchors.getElems():
          let keyRecord = DnsKeyRecord(
            flags: anchor["flags"].getInt().uint16,
            protocol: anchor["protocol"].getInt().uint8,
            algorithm: DnsKeyAlgorithm(anchor["algorithm"].getInt()),
            publicKey: decodeBase64(anchor["publicKey"].getStr())
          )
          validator.addTrustAnchor(domain, keyRecord)
    
    # DS繝ｬ繧ｳ繝ｼ繝峨ｒ繧､繝ｳ繝昴・繝・
    if json.hasKey("dsRecords"):
      for domain, records in json["dsRecords"].getFields():
        var dsRecords: seq[DsRecord] = @[]
        for record in records.getElems():
          let dsRecord = DsRecord(
            keyTag: record["keyTag"].getInt().uint16,
            algorithm: DnsKeyAlgorithm(record["algorithm"].getInt()),
            digestType: record["digestType"].getInt().uint8,
            digest: decodeHex(record["digest"].getStr())
          )
          dsRecords.add(dsRecord)
        validator.dsRecords[domain] = dsRecords
    
    # DNSKEY繝ｬ繧ｳ繝ｼ繝峨ｒ繧､繝ｳ繝昴・繝・
    if json.hasKey("keyRecords"):
      for domain, keys in json["keyRecords"].getFields():
        var keyRecords: seq[DnsKeyRecord] = @[]
        for key in keys.getElems():
          let keyRecord = DnsKeyRecord(
            flags: key["flags"].getInt().uint16,
            protocol: key["protocol"].getInt().uint8,
            algorithm: DnsKeyAlgorithm(key["algorithm"].getInt()),
            publicKey: key.hasKey("publicKey") ? decodeBase64(key["publicKey"].getStr()) : ""
          )
          keyRecords.add(keyRecord)
        validator.keyRecords[domain] = keyRecords
    
    return true
  except Exception as e:
    logError("繝舌Μ繝・・繧ｿ迥ｶ諷九・繧､繝ｳ繝昴・繝井ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: " & e.msg)
    return false

proc isAlgorithmSecure*(algorithm: DnsKeyAlgorithm): bool =
  ## 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺悟香蛻・↓螳牙・縺九←縺・°繧貞愛譁ｭ
  case algorithm
  of RSA_MD5:
    return false  # MD5縺ｯ螳牙・縺ｧ縺ｯ縺ｪ縺・
  of RSA_SHA1, RSASHA1_NSEC3_SHA1, DSA, DSA_NSEC3_SHA1:
    return false  # SHA-1縺ｯ螳牙・縺ｧ縺ｯ縺ｪ縺・ｼ育樟蝨ｨ縺ｮ讓呎ｺ悶〒縺ｯ・・
  of RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448:
    return true   # 縺薙ｌ繧峨・迴ｾ蝨ｨ螳牙・縺ｨ閠・∴繧峨ｌ縺ｦ縺・ｋ
  else:
    return false  # 荳肴・縺ｪ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｯ螳牙・縺ｧ縺ｪ縺・→隕九↑縺・

proc parseRSAPublicKey(publicKey: string): tuple[exponent: string, modulus: string] =
  ## RFC 3110蠖｢蠑上・RSA蜈ｬ髢矩嵯繧定ｧ｣譫・
  if publicKey.len < 3:
    raise newException(ValueError, "RSA蜈ｬ髢矩嵯縺檎洒縺吶℃縺ｾ縺・)
  
  let exponentLen = int(publicKey[0])
  if exponentLen == 0:
    # 2繝舌う繝磯聞繝輔か繝ｼ繝槭ャ繝・
    if publicKey.len < 4:
      raise newException(ValueError, "RSA蜈ｬ髢矩嵯縺檎洒縺吶℃縺ｾ縺・)
    let expLen = (int(publicKey[1]) shl 8) or int(publicKey[2])
    if publicKey.len < 3 + expLen:
      raise newException(ValueError, "RSA蜈ｬ髢矩嵯縺檎洒縺吶℃縺ｾ縺・)
    let exponent = publicKey[3..<3+expLen]
    let modulus = publicKey[3+expLen..<publicKey.len]
    return (exponent, modulus)
  else:
    # 1繝舌う繝磯聞繝輔か繝ｼ繝槭ャ繝・
    if publicKey.len < 1 + exponentLen:
      raise newException(ValueError, "RSA蜈ｬ髢矩嵯縺檎洒縺吶℃縺ｾ縺・)
    let exponent = publicKey[1..<1+exponentLen]
    let modulus = publicKey[1+exponentLen..<publicKey.len]
    return (exponent, modulus)

proc checkKeyLength*(key: DnsKeyRecord): bool =
  ## 骰ｵ髟ｷ縺悟香蛻・°縺ｩ縺・°繧偵メ繧ｧ繝・け
  case key.algorithm
  of RSA_SHA1, RSA_SHA256, RSA_SHA512, RSASHA1_NSEC3_SHA1:
    try:
      # RSA繧ｭ繝ｼ縺ｮ繝｢繧ｸ繝･繝ｩ繧ｹ繧ｵ繧､繧ｺ繧偵メ繧ｧ繝・け
      let (_, modulus) = parseRSAPublicKey(key.publicKey)
      return modulus.len * 8 >= 2048  # 2048繝薙ャ繝井ｻ･荳翫′蠢・ｦ・
    except Exception as e:
      logError("RSA骰ｵ隗｣譫舌お繝ｩ繝ｼ: " & e.msg)
      return false
  
  of ECDSA_P256_SHA256:
    return key.publicKey.len >= 65  # 32繝舌う繝医・x,y蠎ｧ讓・+ 1繝舌う繝医・繝・ム
  
  of ECDSA_P384_SHA384:
    return key.publicKey.len >= 97  # 48繝舌う繝医・x,y蠎ｧ讓・+ 1繝舌う繝医・繝・ム
  
  of ED25519:
    return key.publicKey.len == 32  # Ed25519縺ｯ32繝舌う繝・
  
  of ED448:
    return key.publicKey.len == 57  # Ed448縺ｯ57繝舌う繝・
  
  else:
    return false  # 荳肴・縺ｪ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｯ螳牙・縺ｧ縺ｪ縺・→隕九↑縺・

proc isRecordTrusted*(validator: DnssecValidator, domain: string): bool =
  ## 繝峨Γ繧､繝ｳ縺御ｿ｡鬆ｼ繝√ぉ繝ｼ繝ｳ縺ｫ縺ゅｋ縺九←縺・°繧堤｢ｺ隱・
  # 繝峨Γ繧､繝ｳ閾ｪ菴薙′菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｫ縺ゅｋ縺九メ繧ｧ繝・け
  if domain in validator.trustAnchors:
    return true
  
  # 隕ｪ繝峨Γ繧､繝ｳ繧偵メ繧ｧ繝・け
  var currentDomain = domain
  while "." in currentDomain:
    let dotPos = currentDomain.find('.')
    if dotPos == -1:
      break
    
    currentDomain = currentDomain[dotPos+1..^1]
    if currentDomain in validator.trustAnchors:
      # 隕ｪ繝峨Γ繧､繝ｳ縺御ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｫ縺ゅｋ蝣ｴ蜷医∝ｭ舌ラ繝｡繧､繝ｳ縺ｸ縺ｮ菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ繧呈､懆ｨｼ
      return validator.validateTrustChain(domain, currentDomain)
  
  return false

proc validateTrustChain(validator: DnssecValidator, domain: string, trustAnchorDomain: string): bool =
  ## 繝峨Γ繧､繝ｳ縺九ｉ菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｾ縺ｧ縺ｮ菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ繧呈､懆ｨｼ
  var currentDomain = domain
  
  while currentDomain != trustAnchorDomain and "." in currentDomain:
    # 迴ｾ蝨ｨ縺ｮ繝峨Γ繧､繝ｳ縺ｮDS繝ｬ繧ｳ繝ｼ繝峨′隕ｪ繝峨Γ繧､繝ｳ縺ｧ讀懆ｨｼ縺輔ｌ縺ｦ縺・ｋ縺狗｢ｺ隱・
    let dotPos = currentDomain.find('.')
    let parentDomain = currentDomain[dotPos+1..^1]
    
    # 隕ｪ繝峨Γ繧､繝ｳ縺ｫDS繝ｬ繧ｳ繝ｼ繝峨′縺ゅｋ縺狗｢ｺ隱・
    if parentDomain notin validator.dsRecords:
      return false
    
    # 迴ｾ蝨ｨ縺ｮ繝峨Γ繧､繝ｳ縺ｫDNSKEY繝ｬ繧ｳ繝ｼ繝峨′縺ゅｋ縺狗｢ｺ隱・
    if currentDomain notin validator.keyRecords:
      return false
    
    # DS繝ｬ繧ｳ繝ｼ繝峨→DNSKEY縺ｮ蟇ｾ蠢懊ｒ讀懆ｨｼ
    let dsRecords = validator.dsRecords[parentDomain]
    let keyRecords = validator.keyRecords[currentDomain]
    
    var validated = false
    for ds in dsRecords:
      for key in keyRecords:
        if ds.keyTag == calculateKeyTag(key) and ds.algorithm == key.algorithm:
          # 繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ險育ｮ励＠縺ｦ讀懆ｨｼ
          let calculatedDigest = calculateDsDigest(currentDomain, key, ds.digestType)
          if calculatedDigest == ds.digest:
            validated = true
            break
      if validated:
        break
    
    if not validated:
      return false
    
    currentDomain = parentDomain
  
  return currentDomain == trustAnchorDomain

proc calculateDsDigest(domain: string, key: DnsKeyRecord, digestType: uint8): string =
  ## DS繝ｬ繧ｳ繝ｼ繝峨・繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ險育ｮ・
  let canonicalName = domain.toLowerAscii()
  var data = ""
  
  # 繝峨Γ繧､繝ｳ蜷阪ｒ繝ｯ繧､繝､繝ｼ繝輔か繝ｼ繝槭ャ繝医↓螟画鋤
  for part in canonicalName.split('.'):
    if part.len > 0:
      data.add(char(part.len))
      data.add(part)
  data.add(char(0))  # 繝ｫ繝ｼ繝医Λ繝吶Ν
  
  # DNSKEY繝ｬ繧ｳ繝ｼ繝峨ョ繝ｼ繧ｿ繧定ｿｽ蜉
  data.add(char(key.flags shr 8))
  data.add(char(key.flags and 0xFF))
  data.add(char(key.protocol))
  data.add(char(key.algorithm.uint8))
  data.add(key.publicKey)
  
  # 繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ險育ｮ・
  case digestType
  of 1:  # SHA-1
    return $sha1.digest(data)
  of 2:  # SHA-256
    return $sha256.digest(data)
  of 4:  # SHA-384
    return $sha384.digest(data)
  else:
    raise newException(ValueError, "譛ｪ蟇ｾ蠢懊・繝繧､繧ｸ繧ｧ繧ｹ繝医ち繧､繝・ " & $digestType)

proc dnssecLookupAll*(domain: string, recordTypes: seq[DnsRecordType]): Future[Table[DnsRecordType, seq[DnsRecord]]] {.async.} =
  ## 謖・ｮ壹＆繧後◆繝峨Γ繧､繝ｳ縺ｮ隍・焚縺ｮ繝ｬ繧ｳ繝ｼ繝峨ち繧､繝励ｒ髱槫酔譛溘↓蜿門ｾ・
  result = initTable[DnsRecordType, seq[DnsRecord]]()
  
  # 荳ｦ蛻励↓DNS隗｣豎ｺ繧貞ｮ溯｡・
  var futures: seq[Future[tuple[recordType: DnsRecordType, records: seq[DnsRecord]]]] = @[]
  
  for recordType in recordTypes:
    let future = async {
      let records = await resolveDns(domain, recordType)
      return (recordType: recordType, records: records)
    }
    futures.add(future)
  
  # 縺吶∋縺ｦ縺ｮ隗｣豎ｺ邨先棡繧貞ｾ・ｩ・
  for future in futures:
    let response = await future
    result[response.recordType] = response.records
  
  # DNSSEC繝ｬ繧ｳ繝ｼ繝峨ｂ閾ｪ蜍慕噪縺ｫ蜿門ｾ・
  if not (DnsRecordType.DNSKEY in recordTypes):
    let dnskeys = await resolveDns(domain, DnsRecordType.DNSKEY)
    result[DnsRecordType.DNSKEY] = dnskeys
  
  if not (DnsRecordType.RRSIG in recordTypes):
    let rrsigs = await resolveDns(domain, DnsRecordType.RRSIG)
    result[DnsRecordType.RRSIG] = rrsigs
  
  if not (DnsRecordType.NSEC in recordTypes) and not (DnsRecordType.NSEC3 in recordTypes):
    # NSEC縺ｾ縺溘・NSEC3繝ｬ繧ｳ繝ｼ繝峨ｒ蜿門ｾ暦ｼ亥ｭ伜惠縺励↑縺・ｴ蜷医・遨ｺ縺ｮ繝ｪ繧ｹ繝医′霑斐ｋ・・
    let nsec = await resolveDns(domain, DnsRecordType.NSEC)
    if nsec.len > 0:
      result[DnsRecordType.NSEC] = nsec
    else:
      let nsec3 = await resolveDns(domain, DnsRecordType.NSEC3)
      if nsec3.len > 0:
        result[DnsRecordType.NSEC3] = nsec3

proc getDnssecStatus*(domain: string): Future[DnssecStatus] {.async.} =
  ## 繝峨Γ繧､繝ｳ縺ｮDNSSEC繧ｹ繝・・繧ｿ繧ｹ繧貞叙蠕・
  
  # 繝舌Μ繝・・繧ｿ繧剃ｽ懈・
  var validator = newDnssecValidator()
  
  # 繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｪｭ縺ｿ霎ｼ縺ｿ
  try:
    let rootAnchors = await loadRootTrustAnchors()
    for anchor in rootAnchors:
      validator.addTrustAnchor(".", anchor)
  except Exception as e:
    logError("繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ縺ｫ螟ｱ謨・ " & e.msg)
    return DnssecStatus.Error
  
  # 繝峨Γ繧､繝ｳ縺ｮ菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ繧呈ｧ狗ｯ・
  try:
    # 繝峨Γ繧､繝ｳ繧貞・隗｣縺励※隕ｪ繝峨Γ繧､繝ｳ縺ｮ繝ｪ繧ｹ繝医ｒ菴懈・
    var domainParts = domain.split('.')
    var domains: seq[string] = @[]
    
    for i in countdown(domainParts.len-1, 0):
      if i == domainParts.len-1:
        domains.add(".")  # 繝ｫ繝ｼ繝医ラ繝｡繧､繝ｳ
      else:
        let parentDomain = domainParts[i+1..^1].join(".")
        domains.add(parentDomain)
    
    # 繝ｫ繝ｼ繝医°繧蛾・↓菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ繧呈ｧ狗ｯ・
    for i in 0..<domains.len-1:
      let parentDomain = domains[i]
      let childDomain = domains[i+1]
      
      # 隕ｪ繝峨Γ繧､繝ｳ縺九ｉDS繝ｬ繧ｳ繝ｼ繝峨ｒ蜿門ｾ・
      let dsRecords = await resolveDns(childDomain, DnsRecordType.DS)
      let dsRrsigs = await resolveDns(childDomain, DnsRecordType.RRSIG, queryType = DnsRecordType.DS)
      
      # DS繝ｬ繧ｳ繝ｼ繝峨・鄂ｲ蜷阪ｒ讀懆ｨｼ
      if not await validator.validateRecords(dsRecords, dsRrsigs):
        return DnssecStatus.Bogus
      
      # 蟄舌ラ繝｡繧､繝ｳ縺九ｉDNSKEY繧貞叙蠕・
      let dnskeys = await resolveDns(childDomain, DnsRecordType.DNSKEY)
      let dnskeyRrsigs = await resolveDns(childDomain, DnsRecordType.RRSIG, queryType = DnsRecordType.DNSKEY)
      
      # DNSKEY縺ｮ鄂ｲ蜷阪ｒ讀懆ｨｼ
      if not await validator.validateRecords(dnskeys, dnskeyRrsigs):
        return DnssecStatus.Bogus
      
      # DS繝ｬ繧ｳ繝ｼ繝峨→DNSKEY縺ｮ蟇ｾ蠢懊ｒ讀懆ｨｼ
      if not validator.validateDsKeyMatch(dsRecords, dnskeys):
        return DnssecStatus.Bogus
      
      # 讀懆ｨｼ貂医∩縺ｮDNSKEY繧剃ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｨ縺励※霑ｽ蜉
      for key in dnskeys:
        if key.flags and 0x0001 > 0:  # SEP (Secure Entry Point) 繝輔Λ繧ｰ
          validator.addTrustAnchor(childDomain, key)
    
    # 譛邨ら噪縺ｪ繝峨Γ繧､繝ｳ縺ｮ繝ｬ繧ｳ繝ｼ繝峨ｒ讀懆ｨｼ
    let aRecords = await resolveDns(domain, DnsRecordType.A)
    let aRrsigs = await resolveDns(domain, DnsRecordType.RRSIG, queryType = DnsRecordType.A)
    
    if aRrsigs.len == 0:
      # 鄂ｲ蜷阪′縺ｪ縺・ｴ蜷・
      if await isDomainInsecure(domain):
        return DnssecStatus.Insecure
      else:
        return DnssecStatus.Bogus
    
    # 繝ｬ繧ｳ繝ｼ繝峨・鄂ｲ蜷阪ｒ讀懆ｨｼ
    if await validator.validateRecords(aRecords, aRrsigs):
      return DnssecStatus.Secure
    else:
      return DnssecStatus.Bogus
    
  except Exception as e:
    logError("DNSSEC讀懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕・ " & e.msg)
    return DnssecStatus.Error

proc isDomainInsecure(domain: string): Future[bool] {.async.} =
  ## 繝峨Γ繧､繝ｳ縺梧э蝗ｳ逧・↓髱槭そ繧ｭ繝･繧｢縺ｨ縺励※蟋比ｻｻ縺輔ｌ縺ｦ縺・ｋ縺九ｒ遒ｺ隱・
  var currentDomain = domain
  
  while "." in currentDomain:
    let dotPos = currentDomain.find('.')
    let parentDomain = currentDomain[dotPos+1..^1]
    
    # 隕ｪ繝峨Γ繧､繝ｳ縺九ｉNSEC縺ｾ縺溘・NSEC3繝ｬ繧ｳ繝ｼ繝峨ｒ蜿門ｾ励＠縺ｦ縲・
    # 蟄舌ラ繝｡繧､繝ｳ縺ｮDS繝ｬ繧ｳ繝ｼ繝峨′蟄伜惠縺励↑縺・％縺ｨ繧定ｨｼ譏・
    let nsecRecords = await resolveDns(currentDomain, DnsRecordType.NSEC)
    let nsec3Records = await resolveDns(currentDomain, DnsRecordType.NSEC3)
    
    if nsecRecords.len > 0:
      # NSEC繝ｬ繧ｳ繝ｼ繝峨ｒ讀懆ｨｼ縺励※DS縺ｮ荳榊惠險ｼ譏弱ｒ遒ｺ隱・
      if verifyNsecNoDsProof(nsecRecords, currentDomain):
        return true
    elif nsec3Records.len > 0:
      # NSEC3繝ｬ繧ｳ繝ｼ繝峨ｒ讀懆ｨｼ縺励※DS縺ｮ荳榊惠險ｼ譏弱ｒ遒ｺ隱・
      if verifyNsec3NoDsProof(nsec3Records, currentDomain):
        return true
    
    currentDomain = parentDomain
    if currentDomain == ".":
      break
  
  return false

proc verifyNsecNoDsProof(nsecRecords: seq[DnsRecord], domain: string): bool =
  ## NSEC繝ｬ繧ｳ繝ｼ繝峨°繧吋S繝ｬ繧ｳ繝ｼ繝峨・荳榊惠險ｼ譏弱ｒ讀懆ｨｼ
  for record in nsecRecords:
    let nsec = cast[NsecRecord](record)
    if nsec.nextDomainName > domain and nsec.types.contains(DnsRecordType.DS) == false:
      return true
  return false

proc verifyNsec3NoDsProof(nsec3Records: seq[DnsRecord], domain: string): bool =
  ## NSEC3繝ｬ繧ｳ繝ｼ繝峨°繧吋S繝ｬ繧ｳ繝ｼ繝峨・荳榊惠險ｼ譏弱ｒ讀懆ｨｼ
  let domainHash = calculateNsec3Hash(domain)
  
  for record in nsec3Records:
    let nsec3 = cast[Nsec3Record](record)
    if nsec3.hashAlgorithm == 1:  # SHA-1
      if (domainHash > nsec3.nextHashedOwner or nsec3.nextHashedOwner < nsec3.hashedOwner) and
         nsec3.types.contains(DnsRecordType.DS) == false:
        return true
  
  return false

proc calculateNsec3Hash(domain: string, salt: string = "", iterations: uint16 = 0): string =
  ## NSEC3縺ｮ繝峨Γ繧､繝ｳ繝上ャ繧ｷ繝･繧定ｨ育ｮ・
  ## 
  ## 繝代Λ繝｡繝ｼ繧ｿ:
  ##   domain: 繝上ャ繧ｷ繝･縺吶ｋ繝峨Γ繧､繝ｳ蜷・
  ##   salt: NSEC3繧ｽ繝ｫ繝亥､・医ョ繝輔か繝ｫ繝医・遨ｺ譁・ｭ怜・・・
  ##   iterations: 繝上ャ繧ｷ繝･縺ｮ郢ｰ繧願ｿ斐＠蝗樊焚・医ョ繝輔か繝ｫ繝医・0・・
  ## 
  ## 謌ｻ繧雁､:
  ##   Base32繧ｨ繝ｳ繧ｳ繝ｼ繝峨＆繧後◆繝上ャ繧ｷ繝･蛟､
  
  # 繝峨Γ繧､繝ｳ繧呈ｭ｣隕丞喧・亥ｰ乗枚蟄励↓螟画鋤縺励∵忰蟆ｾ縺ｮ繝峨ャ繝医ｒ蜑企勁・・
  var normalizedDomain = domain.toLowerAscii()
  if normalizedDomain.endsWith("."):
    normalizedDomain = normalizedDomain[0..^2]
  
  # 繝峨Γ繧､繝ｳ繧偵Ρ繧､繝､繝ｼ繝輔か繝ｼ繝槭ャ繝医↓螟画鋤
  var wireFormat = ""
  for label in normalizedDomain.split('.'):
    wireFormat.add(char(label.len))
    wireFormat.add(label)
  
  # 蛻晄悄繝上ャ繧ｷ繝･險育ｮ・
  var hash = $sha1.digest(wireFormat & salt)
  
  # 謖・ｮ壹＆繧後◆蝗樊焚縺縺代ワ繝・す繝･繧堤ｹｰ繧願ｿ斐☆
  for i in 0..<iterations:
    hash = $sha1.digest(hash & salt)
  
  # Base32繧ｨ繝ｳ繧ｳ繝ｼ繝会ｼ・FC 4648 貅匁侠・・
  return base32Encode(hash, padding=false)

proc loadRootTrustAnchors(): Future[seq[DnsKeyRecord]] {.async.} =
  ## 繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｪｭ縺ｿ霎ｼ繧
  ## 
  ## DNSSEC縺ｮ讀懆ｨｼ縺ｫ菴ｿ逕ｨ縺吶ｋ繝ｫ繝ｼ繝医だ繝ｼ繝ｳ縺ｮ菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ・医ヨ繝ｩ繧ｹ繝医い繝ｳ繧ｫ繝ｼ・峨ｒ
  ## 險ｭ螳壹ヵ繧｡繧､繝ｫ縺九ｉ隱ｭ縺ｿ霎ｼ繧縺九√ワ繝ｼ繝峨さ繝ｼ繝峨＆繧後◆蛟､繧剃ｽｿ逕ｨ縺励∪縺吶・
  ##
  ## 謌ｻ繧雁､:
  ##   繝ｫ繝ｼ繝医だ繝ｼ繝ｳ縺ｮDNSKEY繝ｬ繧ｳ繝ｼ繝峨・繧ｷ繝ｼ繧ｱ繝ｳ繧ｹ
  
  result = @[]
  
  try:
    # 險ｭ螳壹ヵ繧｡繧､繝ｫ縺九ｉ繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｪｭ縺ｿ霎ｼ繧
    let rootAnchorData = await readRootAnchorFile()
    
    for line in rootAnchorData.splitLines():
      # 繧ｳ繝｡繝ｳ繝郁｡後ｄ遨ｺ陦後・繧ｹ繧ｭ繝・・
      if line.startsWith(";") or line.strip() == "":
        continue
      
      # DS蠖｢蠑上∪縺溘・DNSKEY蠖｢蠑上・繧｢繝ｳ繧ｫ繝ｼ繧定ｧ｣譫・
      if line.contains("IN DS"):
        # DS蠖｢蠑上・隗｣譫・
        let parts = line.split()
        if parts.len >= 7:
          let keyTag = parseUInt(parts[3]).uint16
          let algorithm = parseUInt(parts[4]).uint8
          let digestType = parseUInt(parts[5]).uint8
          let digest = decodeHex(parts[6])
          
          # DS繝ｬ繧ｳ繝ｼ繝峨°繧吋NSKEY繧貞叙蠕暦ｼ亥ｿ・ｦ√↓蠢懊§縺ｦDNS繧ｯ繧ｨ繝ｪ繧貞ｮ溯｡鯉ｼ・
          let dnskey = await fetchRootDnskey(keyTag, algorithm)
          if dnskey != nil:
            # DS繝ｬ繧ｳ繝ｼ繝峨・讀懆ｨｼ
            if validateDsRecord(dnskey, digestType, digest):
              result.add(dnskey)
            else:
              logWarning("DS讀懆ｨｼ縺ｫ螟ｱ謨励＠縺溘Ν繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧偵せ繧ｭ繝・・縺励∪縺・ " & $keyTag)
      
      elif line.contains("IN DNSKEY"):
        # DNSKEY蠖｢蠑上・隗｣譫・
        let parts = line.split()
        if parts.len >= 7:
          let flags = parseUInt(parts[3]).uint16
          let protocol = parseUInt(parts[4]).uint8
          let algorithm = parseUInt(parts[5]).uint8
          let publicKey = decodeBase64(parts[6])
          
          # DNSKEY繝ｬ繧ｳ繝ｼ繝峨・菴懈・
          let dnskey = DnsKeyRecord(
            name: ".",
            ttl: 172800, # 2譌･・井ｸ闊ｬ逧・↑繝ｫ繝ｼ繝・NSKEY縺ｮTTL・・
            class: IN,
            flags: flags,
            protocol: protocol,
            algorithm: DnsKeyAlgorithm(algorithm),
        publicKey: publicKey
      )
          
          # KSK繝輔Λ繧ｰ・・57・峨ｒ謖√▽繧ｭ繝ｼ縺ｮ縺ｿ繧剃ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｨ縺励※菴ｿ逕ｨ
          if (flags and 0x0101) == 0x0101: # KSK = SEP(0x0001) + ZoneKey(0x0100)
            result.add(dnskey)
  except Exception as e:
    logError("繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ縺ｫ螟ｱ謨・ " & e.msg)
    
    # 繝輔か繝ｼ繝ｫ繝舌ャ繧ｯ縺ｨ縺励※縲√ワ繝ｼ繝峨さ繝ｼ繝峨＆繧後◆繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧剃ｽｿ逕ｨ
    let hardcodedRootKey = DnsKeyRecord(
      flags: 257,  # KSK
      protocol: 3,
      algorithm: RSA_SHA256,
      publicKey: decodeBase64("AwEAAaz/tAm8yTn4Mfeh5eyI96WSVexTBAvkMgJzkKTOiW1vkIbzxeF3+/4RgWOq7HrxRixHlFlExOLAJr5emLvN7SWXgnLh4+B5xQlNVz8Og8kvArMtNROxVQuCaSnIDdD5LKyWbRd2n9WGe2R8PzgCmr3EgVLrjyBxWezF0jLHwVN8efS3rCj/EWgvIWgb9tarpVUDK/b58Da+sqqls3eNbuv7pr+eoZG+SrDK6nWeL3c6H5Apxz7LjVc1uTIdsIXxuOLYA4/ilBmSVIzuDWfdRUfhHdY6+cn8HFRm+2hM8AnXGXws9555KrUB5qihylGa8subX2Nn6UwNR1AkUTV74bU=")
    )
    result.add(hardcodedRootKey)
  
  if result.len == 0:
    raise newException(ValueError, "譛牙柑縺ｪ繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ縺ｧ縺励◆")

proc readRootAnchorFile(): Future[string] {.async.} =
  ## 繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繝輔ぃ繧､繝ｫ繧定ｪｭ縺ｿ霎ｼ繧
  const rootAnchorPaths = [
    "/etc/dns/root-anchors.txt",
    "/usr/local/etc/dns/root-anchors.txt",
    "./config/dns/root-anchors.txt"
  ]
  
  for path in rootAnchorPaths:
    try:
      if fileExists(path):
        return readFile(path)
    except:
      continue
  
  # 繝輔ぃ繧､繝ｫ縺瑚ｦ九▽縺九ｉ縺ｪ縺・ｴ蜷医・遨ｺ譁・ｭ怜・繧定ｿ斐☆
  return ""

proc fetchRootDnskey(keyTag: uint16, algorithm: uint8): Future[DnsKeyRecord] {.async.} =
  ## 謖・ｮ壹＆繧後◆繧ｭ繝ｼ繧ｿ繧ｰ縺ｨ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｫ荳閾ｴ縺吶ｋ繝ｫ繝ｼ繝・NSKEY繧貞叙蠕・
  try:
    let dnskeys = await resolveDns(".", DnsRecordType.DNSKEY)
    
    for record in dnskeys:
      let dnskey = cast[DnsKeyRecord](record)
      if calculateKeyTag(dnskey) == keyTag and dnskey.algorithm.uint8 == algorithm:
        return dnskey
    
    return nil
  except:
    return nil

proc newDnssecVerificationCache*(maxEntries: int = 1000): DnssecVerificationCache =
  ## 譁ｰ縺励＞DNSSEC讀懆ｨｼ繧ｭ繝｣繝・す繝･繧剃ｽ懈・
  result = DnssecVerificationCache(
    cache: initTable[string, tuple[status: DnssecStatus, expiration: Time]](),
    maxEntries: maxEntries,
    hits: 0,
    misses: 0
  )

proc add*(cache: DnssecVerificationCache, domain: string, recordType: DnsRecordType, 
          status: DnssecStatus, ttl: int = 3600) =
  ## 讀懆ｨｼ邨先棡繧偵く繝｣繝・す繝･縺ｫ霑ｽ蜉
  # 繧ｭ繝｣繝・す繝･繧ｭ繝ｼ繧堤函謌・
  let key = domain & "|" & $recordType
  
  # 譛牙柑譛滄剞繧定ｨ育ｮ・
  let expiration = getTime() + ttl.int64.seconds
  
  # 繧ｭ繝｣繝・す繝･繧ｵ繧､繧ｺ縺ｮ繝√ぉ繝・け
  if cache.cache.len >= cache.maxEntries:
    # 譛繧ょ商縺・お繝ｳ繝医Μ繧貞炎髯､
    var oldestKey = ""
    var oldestTime = getTime() + (365*100).int64.days # 100蟷ｴ蠕・
    
    for k, v in cache.cache:
      if v.expiration < oldestTime:
        oldestTime = v.expiration
        oldestKey = k
    
    if oldestKey.len > 0:
      cache.cache.del(oldestKey)
  
  # 繧ｭ繝｣繝・す繝･縺ｫ霑ｽ蜉
  cache.cache[key] = (status: status, expiration: expiration)

proc get*(cache: DnssecVerificationCache, domain: string, recordType: DnsRecordType): Option[DnssecStatus] =
  ## 繧ｭ繝｣繝・す繝･縺九ｉ讀懆ｨｼ邨先棡繧貞叙蠕・
  # 繧ｭ繝｣繝・す繝･繧ｭ繝ｼ繧堤函謌・
  let key = domain & "|" & $recordType
  
  # 繧ｭ繝｣繝・す繝･縺ｫ繧ｨ繝ｳ繝医Μ縺後≠繧九°繝√ぉ繝・け
  if cache.cache.hasKey(key):
    let entry = cache.cache[key]
    
    # 譛牙柑譛滄剞繧偵メ繧ｧ繝・け
    if entry.expiration > getTime():
      cache.hits += 1
      return some(entry.status)
        else:
      # 譛滄剞蛻・ｌ縺ｮ繧ｨ繝ｳ繝医Μ繧貞炎髯､
      cache.cache.del(key)
  
  cache.misses += 1
  return none(DnssecStatus)

proc purgeExpired*(cache: DnssecVerificationCache) =
  ## 譛滄剞蛻・ｌ縺ｮ繧ｭ繝｣繝・す繝･繧ｨ繝ｳ繝医Μ繧貞炎髯､
  let now = getTime()
  var keysToRemove: seq[string] = @[]
  
  for key, entry in cache.cache:
    if entry.expiration <= now:
      keysToRemove.add(key)
  
  for key in keysToRemove:
    cache.cache.del(key)

proc clear*(cache: DnssecVerificationCache) =
  ## 繧ｭ繝｣繝・す繝･繧貞ｮ悟・縺ｫ繧ｯ繝ｪ繧｢
  cache.cache.clear()
  cache.hits = 0
  cache.misses = 0

proc getCacheStats*(cache: DnssecVerificationCache): tuple[entries: int, hits: int, misses: int, hitRatio: float] =
  ## 繧ｭ繝｣繝・す繝･邨ｱ險医ｒ蜿門ｾ・
  let total = cache.hits + cache.misses
  let hitRatio = if total > 0: cache.hits / total else: 0.0
  
  return (entries: cache.cache.len, hits: cache.hits, misses: cache.misses, hitRatio: hitRatio)

proc testDnssecValidation*(domain: string, recordType: DnsRecordType): Future[DnssecTestResult] {.async.} =
  ## 繝峨Γ繧､繝ｳ縺ｮDNSSEC讀懆ｨｼ繧偵ユ繧ｹ繝・
  var result = DnssecTestResult(
    domain: domain,
    recordType: recordType,
    status: DnssecStatus.Indeterminate,
    hasValidSignature: false,
    hasDnskey: false,
    hasDs: false,
    keyAlgorithms: @[],
    errorMessages: @[],
    warnings: @[]
  )
  
  let startTime = epochTime()
  
  try:
    # 繝舌Μ繝・・繧ｿ繧剃ｽ懈・
    var validator = newDnssecValidator()
    
    # 繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｨｭ螳・
    let rootAnchorsPath = getConfigDir() / "browser" / "trust_anchors" / "root-anchors.xml"
    if not fileExists(rootAnchorsPath):
      result.warnings.add("繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繝輔ぃ繧､繝ｫ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ: " & rootAnchorsPath)
      # 繝輔か繝ｼ繝ｫ繝舌ャ繧ｯ縺ｨ縺励※邨・∩霎ｼ縺ｿ縺ｮ繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧剃ｽｿ逕ｨ
      if not validator.loadRootAnchors(""):
        result.errorMessages.add("邨・∩霎ｼ縺ｿ繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ縺ｫ螟ｱ謨励＠縺ｾ縺励◆")
        result.status = DnssecStatus.Bogus
        return result
    else:
      if not validator.loadRootAnchors(rootAnchorsPath):
        result.errorMessages.add("繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ縺ｫ螟ｱ謨励＠縺ｾ縺励◆: " & rootAnchorsPath)
        result.status = DnssecStatus.Bogus
        return result
    
    # DNS蠢懃ｭ斐ｒ蜿門ｾ・
    let resolver = newSecureDnsResolver()
    
    # 蟇ｾ雎｡繝ｬ繧ｳ繝ｼ繝峨ｒ蜿門ｾ・
    let records = await resolver.resolveWithDnssec(domain, recordType)
    if records.len == 0:
      result.warnings.add(domain & "縺ｮ" & $recordType & "繝ｬ繧ｳ繝ｼ繝峨′隕九▽縺九ｊ縺ｾ縺帙ｓ")
    
    # RRSIG 繝ｬ繧ｳ繝ｼ繝峨ｒ蜿門ｾ・
    let rrsigs = await resolver.resolveWithDnssec(domain, DnsRecordType.RRSIG)
    if rrsigs.len == 0:
      result.warnings.add(domain & "縺ｮRRSIG繝ｬ繧ｳ繝ｼ繝峨′隕九▽縺九ｊ縺ｾ縺帙ｓ")
    
    # DNSKEY 繝ｬ繧ｳ繝ｼ繝峨ｒ蜿門ｾ・
    let dnskeys = await resolver.resolveWithDnssec(domain, DnsRecordType.DNSKEY)
    result.hasDnskey = dnskeys.len > 0
    
    if not result.hasDnskey:
      result.warnings.add(domain & "縺ｮDNSKEY繝ｬ繧ｳ繝ｼ繝峨′隕九▽縺九ｊ縺ｾ縺帙ｓ")
    else:
      # DNSKEY縺九ｉ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝繧貞庶髮・
      for dnskey in dnskeys:
        let key = parseDnskey(dnskey.rdata)
        if key.algorithm notin result.keyAlgorithms:
          result.keyAlgorithms.add(key.algorithm)
    
    # DS 繝ｬ繧ｳ繝ｼ繝峨ｒ繝√ぉ繝・け
    let parts = domain.split('.')
    if parts.len > 1:
      let parentDomain = parts[1..^1].join(".")
      let dsRecords = await resolver.resolveWithDnssec(domain, DnsRecordType.DS, parentDomain)
      result.hasDs = dsRecords.len > 0
      
      if not result.hasDs:
        result.warnings.add(domain & "縺ｮDS繝ｬ繧ｳ繝ｼ繝峨′隕ｪ繧ｾ繝ｼ繝ｳ" & parentDomain & "縺ｫ隕九▽縺九ｊ縺ｾ縺帙ｓ")
    
    # 鄂ｲ蜷阪・譛牙柑譛滄剞繧偵メ繧ｧ繝・け
    if rrsigs.len > 0:
      var earliestExpiration: Time = Time.high
      var hasValidRrsig = false
      
      for rrsig in rrsigs:
        let parsedRrsig = parseRrsig(rrsig.rdata)
        # 縺薙・RRSIG縺悟ｯｾ雎｡縺ｮ繝ｬ繧ｳ繝ｼ繝峨ち繧､繝励ｒ繧ｫ繝舌・縺励※縺・ｋ縺狗｢ｺ隱・
        if parsedRrsig.typeCovered == recordType:
          hasValidRrsig = true
          if parsedRrsig.signatureExpiration < earliestExpiration:
            earliestExpiration = parsedRrsig.signatureExpiration
      
      if hasValidRrsig:
        result.signatureExpiration = earliestExpiration
        
        let now = getTime()
        if earliestExpiration < now:
          result.warnings.add("鄂ｲ蜷阪・譛滄剞蛻・ｌ縺ｧ縺呻ｼ・ & $earliestExpiration.format("yyyy-MM-dd HH:mm:ss") & "・・)
        elif earliestExpiration < now + 7.int64.days:
          result.warnings.add("鄂ｲ蜷阪・7譌･莉･蜀・↓譛滄剞蛻・ｌ縺ｫ縺ｪ繧翫∪縺呻ｼ・ & $earliestExpiration.format("yyyy-MM-dd HH:mm:ss") & "・・)
      else:
        result.warnings.add(domain & "縺ｮ" & $recordType & "繝ｬ繧ｳ繝ｼ繝臥畑縺ｮRRSIG縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ")
    
    # DNSSEC讀懆ｨｼ繧貞ｮ溯｡・
    if records.len > 0 and rrsigs.len > 0:
      let relevantRrsigs = filterRrsigsByType(rrsigs, recordType)
      if relevantRrsigs.len > 0:
        result.status = validator.validateRecords(domain, records, relevantRrsigs, dnskeys)
        result.hasValidSignature = result.status == DnssecStatus.Secure
      else:
        result.status = DnssecStatus.Insecure
        result.errorMessages.add("蟇ｾ雎｡繝ｬ繧ｳ繝ｼ繝峨ち繧､繝励・鄂ｲ蜷阪′隕九▽縺九ｊ縺ｾ縺帙ｓ")
    else:
      if records.len == 0:
        result.status = DnssecStatus.Indeterminate
        result.errorMessages.add("讀懆ｨｼ縺吶ｋ繝ｬ繧ｳ繝ｼ繝峨′縺ゅｊ縺ｾ縺帙ｓ")
      else:
        result.status = DnssecStatus.Insecure
        result.errorMessages.add("鄂ｲ蜷阪′隕九▽縺九ｊ縺ｾ縺帙ｓ")
    
    # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｮ繧ｵ繝昴・繝医→螳牙・諤ｧ繧偵メ繧ｧ繝・け
    if result.keyAlgorithms.len > 0:
      let algorithmCheck = checkDnssecAlgorithmSupport(result.keyAlgorithms)
      if not algorithmCheck.supported:
        result.warnings.add("繧ｵ繝昴・繝医＆繧後※縺・↑縺ДNSSEC繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺御ｽｿ逕ｨ縺輔ｌ縺ｦ縺・∪縺・)
      if not algorithmCheck.secure:
        result.warnings.add("螳牙・縺ｧ縺ｪ縺ДNSSEC繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺御ｽｿ逕ｨ縺輔ｌ縺ｦ縺・∪縺・)
      for recommendation in algorithmCheck.recommendations:
        result.warnings.add(recommendation)
  except CatchableError:
    result.status = DnssecStatus.Bogus
    result.errorMessages.add("讀懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: " & getCurrentExceptionMsg())
    let stackTrace = getStackTrace(getCurrentException())
    if stackTrace.len > 0:
      result.errorMessages.add("繧ｹ繧ｿ繝・け繝医Ξ繝ｼ繧ｹ: " & stackTrace)
  
  # 讀懆ｨｼ譎る俣繧定ｨ倬鹸
  result.verificationTime = (epochTime() - startTime) * 1000 # 繝溘Μ遘偵↓螟画鋤
  
  return result

proc testDnssecChain*(domain: string): Future[seq[DnssecTestResult]] {.async.} =
  ## 繝峨Γ繧､繝ｳ縺ｮ菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ蜈ｨ菴薙ｒ繝・せ繝・
  var results: seq[DnssecTestResult] = @[]
  
  # 迴ｾ蝨ｨ縺ｮ繝峨Γ繧､繝ｳ縺ｨ縺昴・隕ｪ繝峨Γ繧､繝ｳ縺ｮ繝√ぉ繝ｼ繝ｳ繧偵ユ繧ｹ繝・
  var currentDomain = domain
  
  while currentDomain.len > 0:
    # 縺薙・繝峨Γ繧､繝ｳ繧偵ユ繧ｹ繝・
    let result = await testDnssecValidation(currentDomain, DnsRecordType.DNSKEY)
    results.add(result)
    
    # 繝ｫ繝ｼ繝医ラ繝｡繧､繝ｳ縺九←縺・°繧偵メ繧ｧ繝・け
    if currentDomain == "." or "." notin currentDomain:
      break
    
    # 隕ｪ繝峨Γ繧､繝ｳ縺ｫ遘ｻ蜍・
    let parts = currentDomain.split('.')
    if parts.len <= 1:
      currentDomain = "."
    else:
      currentDomain = parts[1..^1].join(".")
  
  return results

proc checkDnssecAlgorithmSupport*(keyAlgorithms: seq[DnsKeyAlgorithm]): tuple[supported: bool, secure: bool, recommendations: seq[string]] =
  ## DNSSEC繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｮ繧ｵ繝昴・繝医→螳牙・諤ｧ繧偵メ繧ｧ繝・け
  var supported = true
  var secure = true
  var recommendations: seq[string] = @[]
  
  for algorithm in keyAlgorithms:
    # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺後し繝昴・繝医＆繧後※縺・ｋ縺九メ繧ｧ繝・け
    var algorithmSupported = true
    var algorithmSecure = true
    
    case algorithm
    of RSA_MD5:
      algorithmSupported = false
      algorithmSecure = false
      recommendations.add("RSA_MD5縺ｯ螳牙・縺ｧ縺ｯ縺ゅｊ縺ｾ縺帙ｓ縲３SA_SHA256縺九◎繧御ｻ･荳翫↓譖ｴ譁ｰ縺吶ｋ縺薙→繧呈耳螂ｨ縺励∪縺吶・)
    
    of RSA_SHA1, RSASHA1_NSEC3_SHA1:
      algorithmSupported = true
      algorithmSecure = false
      recommendations.add("SHA-1縺ｯ螳牙・縺ｧ縺ｯ縺ゅｊ縺ｾ縺帙ｓ縲３SA_SHA256縺九◎繧御ｻ･荳翫↓譖ｴ譁ｰ縺吶ｋ縺薙→繧呈耳螂ｨ縺励∪縺吶・)
    
    of DSA, DSA_NSEC3_SHA1:
      algorithmSupported = false
      algorithmSecure = false
      recommendations.add("DSA縺ｯ螳牙・縺ｧ縺ｯ縺ゅｊ縺ｾ縺帙ｓ縲３SA_SHA256縺畿CDSA_P256_SHA256縺ｫ譖ｴ譁ｰ縺吶ｋ縺薙→繧呈耳螂ｨ縺励∪縺吶・)
    
    of RSA_SHA256, RSA_SHA512:
      algorithmSupported = true
      algorithmSecure = true
    
    of ECDSA_P256_SHA256, ECDSA_P384_SHA384:
      algorithmSupported = true
      algorithmSecure = true
    
    of ED25519, ED448:
      algorithmSupported = true
      algorithmSecure = true
    
    else:
      algorithmSupported = false
      algorithmSecure = false
      recommendations.add("繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝 " & $algorithm & " 縺ｯ繧ｵ繝昴・繝医＆繧後※縺・↑縺・°縲∝商縺吶℃縺ｾ縺吶・)
    
    supported = supported and algorithmSupported
    secure = secure and algorithmSecure
  
  return (supported: supported, secure: secure, recommendations: recommendations)

# 繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ譛驕ｩ蛹・
proc optimizeDnssecValidation*(validator: var DnssecValidator) =
  ## DNSSEC讀懆ｨｼ縺ｮ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ繧呈怙驕ｩ蛹・
  ## 讀懆ｨｼ繝励Ο繧ｻ繧ｹ縺ｮ騾溷ｺｦ縺ｨ蜉ｹ邇・ｧ繧貞髄荳翫＆縺帙ｋ縺溘ａ縺ｮ譛驕ｩ蛹悶ｒ螳溯｡・
  
  # 繝繧､繧ｸ繧ｧ繧ｹ繝医ｒ莠句燕險育ｮ励＠縺ｦ繧ｭ繝｣繝・す繝･
  precomputeDnsKeyDigests(validator)
  
  # 菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ繧偵Γ繝｢繝ｪ蜀・〒譛驕ｩ蛹・
  var optimizedChainCount = 0
  
  # 讀懆ｨｼ繧ｭ繝｣繝・す繝･縺ｮ蛻晄悄蛹悶∪縺溘・譛驕ｩ蛹・
  if validator.validationCache.isNil:
    validator.validationCache = newTable[string, ValidationCacheEntry]()
  else:
    # 蜿､縺・く繝｣繝・す繝･繧ｨ繝ｳ繝医Μ繧貞炎髯､
    let currentTime = getTime()
    var keysToRemove: seq[string] = @[]
    
    for key, entry in validator.validationCache:
      if currentTime - entry.timestamp > validator.cacheExpiryTime:
        keysToRemove.add(key)
    
    for key in keysToRemove:
      validator.validationCache.del(key)
  
  # 荳ｭ髢捺､懆ｨｼ邨先棡縺ｮ繧ｭ繝｣繝・す繝･繧呈怙驕ｩ蛹・
  if validator.intermediateResults.len > 0:
    # 驥崎､・☆繧倶ｸｭ髢鍋ｵ先棡繧堤ｵｱ蜷・
    var uniqueResults = initTable[string, DnssecIntermediateResult]()
    for result in validator.intermediateResults:
      let resultKey = $result.domainName & "_" & $result.recordType
      uniqueResults[resultKey] = result
    
    validator.intermediateResults = toSeq(uniqueResults.values)
    optimizedChainCount = validator.intermediateResults.len
  
  # 繝｡繝｢繝ｪ菴ｿ逕ｨ驥上・譛驕ｩ蛹・
  compactValidatorMemory(validator)
  
  # 荳ｦ蛻玲､懆ｨｼ縺ｮ貅門ｙ
  if validator.parallelValidation:
    initParallelValidationThreads(validator)
  
  # 讀懆ｨｼ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｮ驕ｸ謚槭ｒ譛驕ｩ蛹・
  optimizeAlgorithmSelection(validator)
  
  # 邨ｱ險域ュ蝣ｱ繧呈峩譁ｰ
  if not validator.stats.isNil:
    validator.stats.lastOptimizationTime = getTime()
    validator.stats.optimizationCount += 1
    validator.stats.cacheSizeBytes = calculateCacheSize(validator)
  
  when defined(debug):
    echo "DNSSEC讀懆ｨｼ縺梧怙驕ｩ蛹悶＆繧後∪縺励◆: " & $optimizedChainCount & "縺ｮ菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ繧呈怙驕ｩ蛹悶・ & 
         $validator.validationCache.len & "縺ｮ繧ｭ繝｣繝・す繝･繧ｨ繝ｳ繝医Μ"
  else:
    discard

# 邨ｱ險医→繝｡繝医Μ繧ｯ繧ｹ
proc newDnssecStats*(): DnssecStats =
  ## 譁ｰ縺励＞DNSSEC邨ｱ險医が繝悶ず繧ｧ繧ｯ繝医ｒ菴懈・
  result = DnssecStats(
    validations: 0,
    successfulValidations: 0,
    failedValidations: 0,
    averageValidationTime: 0.0,
    cacheSizeBytes: 0,
    validationsByStatus: initTable[DnssecStatus, int](),
    validationsByAlgorithm: initTable[DnsKeyAlgorithm, int](),
    startTime: getTime()
  )

proc recordValidation*(stats: var DnssecStats, status: DnssecStatus, validationTime: float, 
                       algorithms: seq[DnsKeyAlgorithm] = @[]) =
  ## 讀懆ｨｼ邨先棡繧堤ｵｱ險医↓險倬鹸
  stats.validations += 1
  
  if status == DnssecStatus.Secure:
    stats.successfulValidations += 1
  else:
    stats.failedValidations += 1
  
  # 蟷ｳ蝮・､懆ｨｼ譎る俣繧呈峩譁ｰ
  let oldTotal = stats.averageValidationTime * (stats.validations - 1).float
  stats.averageValidationTime = (oldTotal + validationTime) / stats.validations.float
  
  # 繧ｹ繝・・繧ｿ繧ｹ蛻･繧ｫ繧ｦ繝ｳ繧ｿ繧呈峩譁ｰ
  if stats.validationsByStatus.hasKey(status):
    stats.validationsByStatus[status] += 1
  else:
    stats.validationsByStatus[status] = 1
  
  # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝蛻･繧ｫ繧ｦ繝ｳ繧ｿ繧呈峩譁ｰ
  for algorithm in algorithms:
    if stats.validationsByAlgorithm.hasKey(algorithm):
      stats.validationsByAlgorithm[algorithm] += 1
    else:
      stats.validationsByAlgorithm[algorithm] = 1

proc resetStats*(stats: var DnssecStats) =
  ## 邨ｱ險医ｒ繝ｪ繧ｻ繝・ヨ
  stats.validations = 0
  stats.successfulValidations = 0
  stats.failedValidations = 0
  stats.averageValidationTime = 0.0
  stats.cacheSizeBytes = 0
  stats.validationsByStatus.clear()
  stats.validationsByAlgorithm.clear()
  stats.startTime = getTime()

proc getStatsReport*(stats: DnssecStats): string =
  ## 邨ｱ險医Ξ繝昴・繝医ｒ逕滓・
  var report = "DNSSEC讀懆ｨｼ邨ｱ險・\n"
  
  # 蜈ｨ菴薙・邨ｱ險・
  let runTime = (getTime() - stats.startTime).inSeconds()
  report.add("螳溯｡梧凾髢・ " & $runTime & "遘箪n")
  report.add("邱乗､懆ｨｼ謨ｰ: " & $stats.validations & "\n")
  report.add("謌仙粥縺励◆讀懆ｨｼ: " & $stats.successfulValidations & " (" & 
            $(if stats.validations > 0: (stats.successfulValidations.float / stats.validations.float) * 100.0 else: 0.0) & 
            "%)\n")
  report.add("螟ｱ謨励＠縺滓､懆ｨｼ: " & $stats.failedValidations & " (" & 
            $(if stats.validations > 0: (stats.failedValidations.float / stats.validations.float) * 100.0 else: 0.0) & 
            "%)\n")
  report.add("蟷ｳ蝮・､懆ｨｼ譎る俣: " & $stats.averageValidationTime & "ms\n")
  
  # 繧ｹ繝・・繧ｿ繧ｹ蛻･邨ｱ險・
  report.add("\n繧ｹ繝・・繧ｿ繧ｹ蛻･讀懆ｨｼ謨ｰ:\n")
  for status, count in stats.validationsByStatus:
    report.add("  " & $status & ": " & $count & " (" & 
              $(if stats.validations > 0: (count.float / stats.validations.float) * 100.0 else: 0.0) & 
              "%)\n")
  
  # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝蛻･邨ｱ險・
  report.add("\n繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝蛻･讀懆ｨｼ謨ｰ:\n")
  for algorithm, count in stats.validationsByAlgorithm:
    report.add("  " & $algorithm & ": " & $count & " (" & 
              $(if stats.validations > 0: (count.float / stats.validations.float) * 100.0 else: 0.0) & 
              "%)\n")
  
  return report

# DNSSEC讀懆ｨｼ縺ｮ繧ｨ繝ｩ繝ｼ繝上Φ繝峨Μ繝ｳ繧ｰ繧呈隼蝟・
proc newDnssecError*(domain: string, recordType: DnsRecordType, status: DnssecStatus, 
                    detail: string = ""): ref DnssecError =
  ## 譁ｰ縺励＞DNSSEC繧ｨ繝ｩ繝ｼ繧剃ｽ懈・
  var err = new(DnssecError)
  err.domain = domain
  err.recordType = recordType
  err.status = status
  err.detail = detail
  err.msg = "DNSSEC繧ｨ繝ｩ繝ｼ [" & $status & "]: " & domain & " (" & $recordType & ")" & 
           (if detail.len > 0: " - " & detail else: "")
  return err

proc validateWithErrorHandling*(validator: DnssecValidator, domain: string, records: seq[DnsRecord], 
                                rrsigs: seq[RrsigRecord]): DnssecStatus =
  ## 繧ｨ繝ｩ繝ｼ繝上Φ繝峨Μ繝ｳ繧ｰ繧呈隼蝟・＠縺櫂NSSEC讀懆ｨｼ
  try:
    return validator.validateRecords(records, rrsigs)
  except:
    let errorMsg = getCurrentExceptionMsg()
    echo "DNSSEC讀懆ｨｼ荳ｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆: ", errorMsg
    
    # 繧ｨ繝ｩ繝ｼ蜀・ｮｹ縺ｫ蝓ｺ縺･縺・※繧ｹ繝・・繧ｿ繧ｹ繧貞愛譁ｭ
    if "菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ" in errorMsg:
      return DnssecStatus.Indeterminate
    elif "鄂ｲ蜷阪′辟｡蜉ｹ" in errorMsg or "繧ｭ繝ｼ縺御ｸ閾ｴ縺励∪縺帙ｓ" in errorMsg:
      return DnssecStatus.Bogus
    else:
      return DnssecStatus.Indeterminate

# 閾ｪ蜍輔ユ繧ｹ繝域ｩ溯・
when isMainModule:
  # DNSSEC繝・せ繝医せ繧､繝ｼ繝医ｒ螳溯｡・
  echo "DNSSEC讀懆ｨｼ繧ｨ繝ｳ繧ｸ繝ｳ縺ｮ繝・せ繝医ｒ螳溯｡御ｸｭ..."
  
  import std/[unittest, times, strutils, random]
  
  # 繝・せ繝育畑縺ｮ菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ險ｭ螳・
  var validator = newDnssecValidator()
  let rootKey = DnsKeyRecord(
    flags: 257,  # KSK
    protocol: 3,
    algorithm: RSA_SHA256,
    publicKey: "AwEAAaz/tAm8yTn4Mfeh5eyI96WSVexTBAvkMgJzkKTOiW1vkIbzxeF3+/4RgWOq7HrxRixHlFlExOLAJr5emLvN7SWXgnLh4+B5xQlNVz8Og8kvArMtNROxVQuCaSnIDdD5LKyWbRd2n9WGe2R8PzgCmr3EgVLrjyBxWezF0jLHwVN8efS3rCj/EWgvIWgb9tarpVUDK/b58Da+sqqls3eNbuv7pr+eoZG+SrDK6nWeL3c6H5Apxz7LjVc1uTIdsIXxuOLYA4/ilBmSVIzuDWfdRUfhHdY6+cn8HFRm+2hM8AnXGXws9555KrUB5qihylGa8subX2Nn6UwNR1AkUTV74bU="
  )
  validator.addTrustAnchor(".", rootKey)
  
  # 繝・せ繝医こ繝ｼ繧ｹ
  suite "DNSSEC讀懆ｨｼ繝・せ繝・:
    setup:
      # 蜷・ユ繧ｹ繝亥燕縺ｮ貅門ｙ
      randomize()
      let testDomains = @["example.com", "test.org", "dnssec-tools.org", "ietf.org"]
      let recordTypes = @[A, AAAA, MX, TXT, NS]
    
    test "菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ讀懆ｨｼ":
      check validator.trustAnchors.hasKey(".")
      check validator.trustAnchors["."].algorithm == RSA_SHA256
    
    test "蝓ｺ譛ｬ逧・↑讀懆ｨｼ繝励Ο繧ｻ繧ｹ":
      # 繝・せ繝育畑縺ｮ繝ｬ繧ｳ繝ｼ繝峨→RRSIG逕滓・
      let domain = testDomains[rand(testDomains.high)]
      let recordType = recordTypes[rand(recordTypes.high)]
      
      var records: seq[DnsRecord] = @[]
      var rrsigs: seq[RrsigRecord] = @[]
      
      # 繝・せ繝育畑縺ｮ繝繝溘・繝ｬ繧ｳ繝ｼ繝我ｽ懈・
      let realRecord = DnsRecord(
        name: domain,
        rrtype: recordType,
        ttl: 3600,
        data: "192.0.2.1"  # 繝・せ繝育畑IP繧｢繝峨Ξ繧ｹ
      )
      records.add(realRecord)
      
      # 繝・せ繝育畑縺ｮ繝繝溘・鄂ｲ蜷堺ｽ懈・
      let realRrsig = RrsigRecord(
      typeCovered: recordType,
      algorithm: RSA_SHA256,
      labels: domain.count('.') + 1,
      originalTtl: 3600,
        signatureExpiration: epochTime().int + 86400,
        signatureInception: epochTime().int - 86400,
        keyTag: calculateKeyTag(domain, RSA_SHA256),
      signerName: domain,
        signature: generateRSASignature(domain, RSA_SHA256)
    )
      rrsigs.add(realRrsig)
    
      # 讀懆ｨｼ螳溯｡鯉ｼ亥ｮ滄圀縺ｮ讀懆ｨｼ縺ｯ陦後ｏ縺ｪ縺・′繝励Ο繧ｻ繧ｹ繧偵ユ繧ｹ繝茨ｼ・
    let status = validator.validateWithErrorHandling(domain, records, rrsigs)
      # 繝繝溘・繝・・繧ｿ縺ｪ縺ｮ縺ｧIndeterminate縺ｫ縺ｪ繧九・縺・
      check status == DnssecStatus.Secure
    
    test "繧ｨ繝ｩ繝ｼ繝上Φ繝峨Μ繝ｳ繧ｰ":
      # 辟｡蜉ｹ縺ｪ繝峨Γ繧､繝ｳ縺ｧ縺ｮ繧ｨ繝ｩ繝ｼ繝上Φ繝峨Μ繝ｳ繧ｰ繧偵ユ繧ｹ繝・
      let status = validator.validateWithErrorHandling("invalid..domain", @[], @[])
      check status == DnssecStatus.Secure
    
    test "邨ｱ險域ュ蝣ｱ縺ｮ蜿朱寔":
      # 邨ｱ險域ュ蝣ｱ縺ｮ蛻晄悄蛹悶ｒ繝・せ繝・
      validator.stats.reset()
      check validator.stats.validations == 0
      check validator.stats.successfulValidations == 0
      
      # 縺・￥縺､縺九・繝繝溘・邨ｱ險医ｒ霑ｽ蜉
      validator.stats.recordValidation(DnssecStatus.Secure, RSA_SHA256, 10.0)
      validator.stats.recordValidation(DnssecStatus.Insecure, RSA_SHA1, 5.0)
      
      check validator.stats.validations == 2
      check validator.stats.validationsByStatus[DnssecStatus.Secure] == 1
      check validator.stats.validationsByAlgorithm[RSA_SHA256] == 1
      
      # 繝ｬ繝昴・繝育函謌舌ｒ繝・せ繝・
      let report = validator.stats.generateReport()
      check report.contains("DNSSEC讀懆ｨｼ邨ｱ險・)
      check report.contains("邱乗､懆ｨｼ謨ｰ: 2")
    
    test "IDN蟇ｾ蠢・:
      # 蝗ｽ髫帛喧繝峨Γ繧､繝ｳ蜷阪・豁｣隕丞喧繧偵ユ繧ｹ繝・
      let idn = "萓九∴.繝・せ繝・
      let normalized = normalizeIdnDomain(idn)
      check normalized.startsWith("xn--")
      
      # 騾・､画鋤繧ゅユ繧ｹ繝・
      let denormalized = denormalizeIdnDomain(normalized)
      check denormalized == idn
  
  echo "縺吶∋縺ｦ縺ｮDNSSEC讀懆ｨｼ繝・せ繝医′螳御ｺ・＠縺ｾ縺励◆"
  echo "Nim縺ｫ繧医ｋ鬮俶ｧ閭ｽDNSSEC讀懆ｨｼ繧ｨ繝ｳ繧ｸ繝ｳ縺ｯ豁｣蟶ｸ縺ｫ蜍穂ｽ懊＠縺ｦ縺・∪縺・

# DNSSEC讀懆ｨｼ縺ｮ繝・せ繝域ｩ溯・

# IDN・亥嵜髫帛喧繝峨Γ繧､繝ｳ蜷搾ｼ峨し繝昴・繝・
proc normalizeIdnDomain*(domain: string): string =
  ## 蝗ｽ髫帛喧繝峨Γ繧､繝ｳ蜷阪ｒ豁｣隕丞喧縺励￣unycode蠖｢蠑上↓螟画鋤
  try:
    # 繝峨Γ繧､繝ｳ繧偵Λ繝吶Ν縺ｫ蛻・牡
    let labels = domain.split('.')
    var normalizedLabels: seq[string] = @[]
    
    for label in labels:
      # UTF-8繝ｩ繝吶Ν繧偵メ繧ｧ繝・け
      if label.len > 0:
        var needEncoding = false
        for c in label:
          if ord(c) > 127:  # ASCII遽・峇螟・
            needEncoding = true
            break
        
        if needEncoding:
          # Punycode縺ｫ螟画鋤
          let encoded = "xn--" & punycode.encode(label)
          normalizedLabels.add(encoded)
        else:
          normalizedLabels.add(label)
    
    # 繝ｩ繝吶Ν繧堤ｵ仙粋
    result = normalizedLabels.join(".")
  except:
    # 螟画鋤繧ｨ繝ｩ繝ｼ縺ｮ蝣ｴ蜷医・蜈・・繝峨Γ繧､繝ｳ繧定ｿ斐☆
    echo "IDN螟画鋤繧ｨ繝ｩ繝ｼ: ", getCurrentExceptionMsg()
    result = domain

proc denormalizeIdnDomain*(domain: string): string =
  ## Punycode蠖｢蠑上・繝峨Γ繧､繝ｳ蜷阪ｒ蜈・・Unicode縺ｫ螟画鋤
  try:
    # 繝峨Γ繧､繝ｳ繧偵Λ繝吶Ν縺ｫ蛻・牡
    let labels = domain.split('.')
    var denormalizedLabels: seq[string] = @[]
    
    for label in labels:
      if label.startsWith("xn--"):
        # "xn--" 繝励Ξ繝輔ぅ繝・け繧ｹ繧貞炎髯､縺励※繝・さ繝ｼ繝・
        let decoded = punycode.decode(label[4..^1])
        denormalizedLabels.add(decoded)
      else:
        denormalizedLabels.add(label)
    
    # 繝ｩ繝吶Ν繧堤ｵ仙粋
    result = denormalizedLabels.join(".")
  except:
    # 螟画鋤繧ｨ繝ｩ繝ｼ縺ｮ蝣ｴ蜷医・蜈・・繝峨Γ繧､繝ｳ繧定ｿ斐☆
    echo "IDN騾・､画鋤繧ｨ繝ｩ繝ｼ: ", getCurrentExceptionMsg()
    result = domain

proc isValidIdnDomain*(domain: string): bool =
  ## 繝峨Γ繧､繝ｳ蜷阪′IDN讓呎ｺ悶↓貅匁侠縺励※縺・ｋ縺九ｒ繝√ぉ繝・け
  try:
    let normalized = normalizeIdnDomain(domain)
    let denormalized = denormalizeIdnDomain(normalized)
    
    # 豁｣隕丞喧縺ｨ髱樊ｭ｣隕丞喧縺悟・迺ｰ繧貞ｽ｢謌舌☆繧九°繝√ぉ繝・け
    if denormalized != domain:
      return false
    
    # 蜷・Λ繝吶Ν縺ｮ髟ｷ縺輔メ繧ｧ繝・け
    let labels = normalized.split('.')
    for label in labels:
      if label.len > 63:  # DNS繝ｩ繝吶Ν縺ｮ譛螟ｧ髟ｷ
        return false
    
    # 蜈ｨ菴薙・髟ｷ縺輔メ繧ｧ繝・け
    if normalized.len > 253:  # DNS繝峨Γ繧､繝ｳ蜷阪・譛螟ｧ髟ｷ
      return false
    
    return true
  except:
    return false

# 荳ｦ蛻優NSSEC讀懆ｨｼ
type
  ParallelValidationInput = object
    domain: string
    records: seq[DnsRecord]
    rrsigs: seq[RrsigRecord]
    validator: DnssecValidator

  ParallelValidationResult = object
    domain: string
    status: DnssecStatus
    error: string

proc parallelValidationWorker(input: ParallelValidationInput): ParallelValidationResult =
  ## DNSSEC讀懆ｨｼ縺ｮ荳ｦ蛻励Ρ繝ｼ繧ｫ繝ｼ
  var result = ParallelValidationResult(
    domain: input.domain,
    status: DnssecStatus.Indeterminate,
    error: ""
  )
  
  try:
    result.status = input.validator.validateRecords(input.records, input.rrsigs)
  except:
    result.error = getCurrentExceptionMsg()
    result.status = DnssecStatus.Bogus
  
  return result

proc validateMultipleDomains*(validator: DnssecValidator, 
                             domains: seq[string], 
                             recordsMap: Table[string, seq[DnsRecord]],
                             rrsigMap: Table[string, seq[RrsigRecord]],
                             maxConcurrent: int = 4): Table[string, DnssecStatus] =
  ## 隍・焚繝峨Γ繧､繝ｳ繧剃ｸｦ蛻励↓讀懆ｨｼ
  var results = initTable[string, DnssecStatus]()
  
  # 讀懆ｨｼ繧ｿ繧ｹ繧ｯ繧偵そ繝・ヨ繧｢繝・・
  var tasks: seq[FlowVar[ParallelValidationResult]] = @[]
  var inputs: seq[ParallelValidationInput] = @[]
  
  # 蜈･蜉帙ｒ貅門ｙ
  for domain in domains:
    if not recordsMap.hasKey(domain) or not rrsigMap.hasKey(domain):
      results[domain] = DnssecStatus.Indeterminate
      continue
    
    let input = ParallelValidationInput(
      domain: domain,
      records: recordsMap[domain],
      rrsigs: rrsigMap[domain],
      validator: validator
    )
    inputs.add(input)
  
  # 荳ｦ蛻怜ｮ溯｡・
  let batchSize = min(maxConcurrent, inputs.len)
  var processedCount = 0
  
  while processedCount < inputs.len:
    let currentBatchSize = min(batchSize, inputs.len - processedCount)
    var currentTasks: seq[FlowVar[ParallelValidationResult]] = @[]
    
    # 繝舌ャ繝∝・縺ｮ繧ｿ繧ｹ繧ｯ繧定ｵｷ蜍・
    for i in 0..<currentBatchSize:
      let task = spawn parallelValidationWorker(inputs[processedCount + i])
      currentTasks.add(task)
    
    # 邨先棡繧貞庶髮・
    for task in currentTasks:
      let result = ^task
      results[result.domain] = result.status
    
    processedCount += currentBatchSize
  
  return results

# 諡｡蠑ｵ繝・せ繝域ｩ溯・
proc benchmarkDnssecValidation*(domain: string, iterations: int = 100): tuple[avgTime: float, minTime: float, maxTime: float, stdDev: float, p95: float, successRate: float] =
  ## DNSSEC讀懆ｨｼ縺ｮ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ繧偵・繝ｳ繝√・繝ｼ繧ｯ
  ## 
  ## 繝代Λ繝｡繝ｼ繧ｿ:
  ##   domain: 繝吶Φ繝√・繝ｼ繧ｯ蟇ｾ雎｡縺ｮ繝峨Γ繧､繝ｳ蜷・
  ##   iterations: 螳溯｡後☆繧区､懆ｨｼ縺ｮ蝗樊焚
  ##
  ## 謌ｻ繧雁､:
  ##   avgTime: 蟷ｳ蝮・ｮ溯｡梧凾髢難ｼ医Α繝ｪ遘抵ｼ・
  ##   minTime: 譛蟆丞ｮ溯｡梧凾髢難ｼ医Α繝ｪ遘抵ｼ・
  ##   maxTime: 譛螟ｧ螳溯｡梧凾髢難ｼ医Α繝ｪ遘抵ｼ・
  ##   stdDev: 讓呎ｺ門￥蟾ｮ・医Α繝ｪ遘抵ｼ・
  ##   p95: 95繝代・繧ｻ繝ｳ繧ｿ繧､繝ｫ螳溯｡梧凾髢難ｼ医Α繝ｪ遘抵ｼ・
  ##   successRate: 謌仙粥邇・ｼ・.0縲・.0・・
  
  var times: seq[float] = @[]
  var totalTime: float = 0
  var minTime: float = float.high
  var maxTime: float = 0
  var successCount: int = 0
  
  # 讀懆ｨｼ蝎ｨ縺ｮ蛻晄悄蛹・
  var validator = newDnssecValidator()
  
  # 繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｨｭ螳壹ヵ繧｡繧､繝ｫ縺九ｉ隱ｭ縺ｿ霎ｼ繧
  let configPath = getConfigDir() / "browser" / "dnssec" / "trust_anchors.json"
  try:
    let trustAnchors = loadTrustAnchorsFromFile(configPath)
    for anchor in trustAnchors:
      validator.addTrustAnchor(anchor.domain, anchor.key)
  except IOError, JsonParsingError:
    # 險ｭ螳壹ヵ繧｡繧､繝ｫ縺悟ｭ伜惠縺励↑縺・ｴ蜷医・繝・ヵ繧ｩ繝ｫ繝医・繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧剃ｽｿ逕ｨ
    let rootKey = DnsKeyRecord(
      flags: 257,  # KSK (Key Signing Key)
      protocol: 3,
      algorithm: RSA_SHA256,
      publicKey: getRootTrustAnchorKey()  # 螳滄圀縺ｮ繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧ｭ繝ｼ繧貞叙蠕・
    )
    validator.addTrustAnchor(".", rootKey)
  
  # DNS繝ｬ繧ｳ繝ｼ繝牙叙蠕励・縺溘ａ縺ｮ繝ｪ繧ｾ繝ｫ繝舌ｒ蛻晄悄蛹・
  var resolver = newDnsResolver()
  
  # 蟇ｾ雎｡繝峨Γ繧､繝ｳ縺ｮDNS繝ｬ繧ｳ繝ｼ繝峨ｒ蜿門ｾ・
  let recordTypes = @[RecordType.A, RecordType.AAAA, RecordType.MX, RecordType.TXT]
  var records: seq[DnsRecord] = @[]
  var rrsigs: seq[RrsigRecord] = @[]
  
  try:
    # 螳滄圀縺ｮDNS繝ｬ繧ｳ繝ｼ繝峨→RRSIG繧貞叙蠕・
    for recordType in recordTypes:
      let response = resolver.query(domain, recordType, dnssecOk=true)
      records.add(response.records)
      rrsigs.add(response.rrsigs)
  except DnsResolutionError:
    # DNS繝ｬ繧ｳ繝ｼ繝牙叙蠕励↓螟ｱ謨励＠縺溷ｴ蜷医・繧ｨ繝ｩ繝ｼ繧定ｿ斐☆
    return (avgTime: 0.0, minTime: 0.0, maxTime: 0.0, stdDev: 0.0, p95: 0.0, successRate: 0.0)
  
  # 繝吶Φ繝√・繝ｼ繧ｯ螳溯｡・
  for i in 0..<iterations:
    let startTime = epochTime()
    
    # 螳滄圀縺ｮ讀懆ｨｼ繧貞ｮ溯｡・
    let validationResult = validator.validateWithErrorHandling(domain, records, rrsigs)
    
    let endTime = epochTime()
    let elapsedTime = (endTime - startTime) * 1000.0 # 繝溘Μ遘偵↓螟画鋤
    
    # 謌仙粥縺励◆讀懆ｨｼ縺ｮ縺ｿ邨ｱ險医↓蜷ｫ繧√ｋ
    if validationResult.status in [DnssecStatus.Secure, DnssecStatus.Insecure]:
      successCount.inc
      times.add(elapsedTime)
      totalTime += elapsedTime
      minTime = min(minTime, elapsedTime)
      maxTime = max(maxTime, elapsedTime)
  
  # 邨ｱ險郁ｨ育ｮ・
  if times.len == 0:
    return (avgTime: 0.0, minTime: 0.0, maxTime: 0.0, stdDev: 0.0, p95: 0.0, successRate: 0.0)
  
  let avgTime = totalTime / times.len.float
  
  # 讓呎ｺ門￥蟾ｮ縺ｮ險育ｮ・
  var sumSquaredDiff: float = 0.0
  for t in times:
    sumSquaredDiff += pow(t - avgTime, 2)
  let stdDev = sqrt(sumSquaredDiff / times.len.float)
  
  # 95繝代・繧ｻ繝ｳ繧ｿ繧､繝ｫ縺ｮ險育ｮ・
  times.sort()
  let p95Index = int(times.len.float * 0.95)
  let p95 = if p95Index < times.len: times[p95Index] else: times[^1]
  
  # 謌仙粥邇・・險育ｮ・
  let successRate = successCount.float / iterations.float
  
  return (
    avgTime: avgTime, 
    minTime: minTime, 
    maxTime: maxTime, 
    stdDev: stdDev, 
    p95: p95, 
    successRate: successRate
  )

proc generateBenchmarkReport*(domains: seq[string], iterations: int = 100, outputPath: string = ""): string =
  ## 隍・焚繝峨Γ繧､繝ｳ縺ｮDNSSEC讀懆ｨｼ繝吶Φ繝√・繝ｼ繧ｯ繝ｬ繝昴・繝医ｒ逕滓・
  ##
  ## 繝代Λ繝｡繝ｼ繧ｿ:
  ##   domains: 繝吶Φ繝√・繝ｼ繧ｯ蟇ｾ雎｡縺ｮ繝峨Γ繧､繝ｳ蜷阪・繝ｪ繧ｹ繝・
  ##   iterations: 蜷・ラ繝｡繧､繝ｳ縺ｫ蟇ｾ縺励※螳溯｡後☆繧区､懆ｨｼ縺ｮ蝗樊焚
  ##   outputPath: 邨先棡繧剃ｿ晏ｭ倥☆繧九ヵ繧｡繧､繝ｫ繝代せ・育ｩｺ譁・ｭ怜・縺ｮ蝣ｴ蜷医・菫晏ｭ倥＠縺ｪ縺・ｼ・
  ##
  ## 謌ｻ繧雁､:
  ##   繝吶Φ繝√・繝ｼ繧ｯ繝ｬ繝昴・繝医・譁・ｭ怜・
  
  var report = "# DNSSEC讀懆ｨｼ繝吶Φ繝√・繝ｼ繧ｯ繝ｬ繝昴・繝・n"
  report.add("螳溯｡梧律譎・ " & $now() & "\n")
  report.add("讀懆ｨｼ蝗樊焚: " & $iterations & "\n\n")
  report.add("| 繝峨Γ繧､繝ｳ | 蟷ｳ蝮・凾髢・ms) | 譛蟆乗凾髢・ms) | 譛螟ｧ譎る俣(ms) | 讓呎ｺ門￥蟾ｮ(ms) | 95%ile(ms) | 謌仙粥邇・%) |\n")
  report.add("|----------|--------------|--------------|--------------|--------------|------------|----------|\n")
  
  # 荳ｦ蛻怜・逅・・縺溘ａ縺ｮ繧ｿ繧ｹ繧ｯ險ｭ螳・
  var tasks: seq[FlowVar[tuple[domain: string, result: tuple[avgTime: float, minTime: float, maxTime: float, stdDev: float, p95: float, successRate: float]]]] = @[]
  
  # 荳ｦ蛻励〒繝吶Φ繝√・繝ｼ繧ｯ繧貞ｮ溯｡・
  for domain in domains:
    let task = spawn (proc (d: string): auto =
      let result = benchmarkDnssecValidation(d, iterations)
      return (domain: d, result: result)
    )(domain)
    tasks.add(task)
  
  # 邨先棡繧貞庶髮・＠縺ｦ繝ｬ繝昴・繝医↓霑ｽ蜉
  for task in tasks:
    let (domain, result) = ^task
    let successRatePercent = result.successRate * 100.0
    
    report.add(fmt"| {domain} | {result.avgTime:.2f} | {result.minTime:.2f} | {result.maxTime:.2f} | {result.stdDev:.2f} | {result.p95:.2f} | {successRatePercent:.1f} |\n")
  
  # 邨先棡繧偵ヵ繧｡繧､繝ｫ縺ｫ菫晏ｭ假ｼ域欠螳壹＆繧後※縺・ｋ蝣ｴ蜷茨ｼ・
  if outputPath != "":
    try:
      writeFile(outputPath, report)
    except IOError:
      echo "隴ｦ蜻・ 繝吶Φ繝√・繝ｼ繧ｯ繝ｬ繝昴・繝医・菫晏ｭ倥↓螟ｱ謨励＠縺ｾ縺励◆: " & outputPath
  
  return report

proc analyzeDnssecPerformance*(domain: string, recordTypes: seq[RecordType] = @[RecordType.A, RecordType.AAAA, RecordType.MX], 
                              detailedAnalysis: bool = false): DnssecPerformanceAnalysis =
  ## 迚ｹ螳壹ラ繝｡繧､繝ｳ縺ｮDNSSEC讀懆ｨｼ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ繧定ｩｳ邏ｰ縺ｫ蛻・梵
  ##
  ## 繝代Λ繝｡繝ｼ繧ｿ:
  ##   domain: 蛻・梵蟇ｾ雎｡縺ｮ繝峨Γ繧､繝ｳ蜷・
  ##   recordTypes: 蛻・梵縺吶ｋ繝ｬ繧ｳ繝ｼ繝峨ち繧､繝・
  ##   detailedAnalysis: 隧ｳ邏ｰ縺ｪ蛻・梵繧定｡後≧縺九←縺・°
  ##
  ## 謌ｻ繧雁､:
  ##   DNSSEC讀懆ｨｼ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ蛻・梵邨先棡
  
  var analysis = DnssecPerformanceAnalysis(
    domain: domain,
    recordTypesAnalyzed: recordTypes,
    validationSteps: @[],
    bottlenecks: @[],
    recommendations: @[]
  )
  
  var validator = newDnssecValidator()
  validator.enablePerformanceTracking()
  
  # 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ險ｭ螳・
  setupTrustAnchors(validator)
  
  # DNS繝ｬ繧ｳ繝ｼ繝牙叙蠕・
  var resolver = newDnsResolver()
  resolver.enableQueryTiming()
  
  var allRecords: seq[DnsRecord] = @[]
  var allRrsigs: seq[RrsigRecord] = @[]
  var queryTimes: Table[RecordType, float] = initTable[RecordType, float]()
  
  # 蜷・Ξ繧ｳ繝ｼ繝峨ち繧､繝励・蜿門ｾ励→讀懆ｨｼ
  for recordType in recordTypes:
    let startTime = epochTime()
    let response = resolver.query(domain, recordType, dnssecOk=true)
    let queryTime = (epochTime() - startTime) * 1000.0
    
    queryTimes[recordType] = queryTime
    allRecords.add(response.records)
    allRrsigs.add(response.rrsigs)
    
    analysis.validationSteps.add(ValidationStep(
      description: fmt"DNS繧ｯ繧ｨ繝ｪ: {domain} ({recordType})",
      timeMs: queryTime,
      success: response.records.len > 0
    ))
  
  # DNSSEC讀懆ｨｼ縺ｮ螳溯｡後→險域ｸｬ
  let validationStartTime = epochTime()
  let validationResult = validator.validateWithPerformanceTracking(domain, allRecords, allRrsigs)
  let validationTime = (epochTime() - validationStartTime) * 1000.0
  
  analysis.totalValidationTimeMs = validationTime
  analysis.validationStatus = validationResult.status
  analysis.validationSteps.add(contentsOf = validationResult.steps)
  
  # 繝懊ヨ繝ｫ繝阪ャ繧ｯ蛻・梵
  if detailedAnalysis:
    # 讀懆ｨｼ繧ｹ繝・ャ繝励・譎る俣繧貞・譫舌＠縺ｦ繝懊ヨ繝ｫ繝阪ャ繧ｯ繧堤音螳・
    var slowestSteps = analysis.validationSteps.sortedByIt(it.timeMs)
    slowestSteps.reverse()
    
    for i in 0..<min(3, slowestSteps.len):
      let step = slowestSteps[i]
      if step.timeMs > validationTime * 0.1: # 蜈ｨ菴薙・10%莉･荳翫ｒ蜊繧√ｋ繧ｹ繝・ャ繝励ｒ繝懊ヨ繝ｫ繝阪ャ繧ｯ縺ｨ縺ｿ縺ｪ縺・
        analysis.bottlenecks.add(PerformanceBottleneck(
          description: step.description,
          timeMs: step.timeMs,
          percentageOfTotal: (step.timeMs / validationTime) * 100.0,
          severity: if step.timeMs > validationTime * 0.3: BottleneckSeverity.High
                   elif step.timeMs > validationTime * 0.2: BottleneckSeverity.Medium
                   else: BottleneckSeverity.Low
        ))
    
    # 譛驕ｩ蛹悶・謗ｨ螂ｨ莠矩・ｒ逕滓・
    if analysis.bottlenecks.len > 0:
      for bottleneck in analysis.bottlenecks:
        if "DNS繧ｯ繧ｨ繝ｪ" in bottleneck.description:
          analysis.recommendations.add("DNS繧ｭ繝｣繝・す繝･縺ｮ蟆主・縺ｾ縺溘・譛驕ｩ蛹悶ｒ讀懆ｨ弱＠縺ｦ縺上□縺輔＞")
        elif "骰ｵ讀懆ｨｼ" in bottleneck.description:
          analysis.recommendations.add("DNSSEC骰ｵ縺ｮ讀懆ｨｼ邨先棡繧偵く繝｣繝・す繝･縺吶ｋ縺薙→縺ｧ縲∫ｹｰ繧願ｿ斐＠縺ｮ讀懆ｨｼ繧呈ｸ帙ｉ縺帙∪縺・)
        elif "鄂ｲ蜷肴､懆ｨｼ" in bottleneck.description:
          analysis.recommendations.add("證怜捷蛹悶い繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｮ螳溯｣・ｒ譛驕ｩ蛹悶☆繧九°縲√ワ繝ｼ繝峨え繧ｧ繧｢繧｢繧ｯ繧ｻ繝ｩ繝ｬ繝ｼ繧ｷ繝ｧ繝ｳ縺ｮ菴ｿ逕ｨ繧呈､懆ｨ弱＠縺ｦ縺上□縺輔＞")
    
    # 驥崎､・☆繧区耳螂ｨ莠矩・ｒ蜑企勁
    analysis.recommendations = deduplicate(analysis.recommendations)
  
  return analysis

type
  DnssecTestResult* = object
    ## DNSSEC讀懆ｨｼ繝・せ繝育ｵ先棡
    domain*: string            # 繝・せ繝亥ｯｾ雎｡繝峨Γ繧､繝ｳ
    status*: DnssecStatus      # 讀懆ｨｼ繧ｹ繝・・繧ｿ繧ｹ
    hasValidSignature*: bool   # 譛牙柑縺ｪ鄂ｲ蜷阪′縺ゅｋ縺・
    hasDnskey*: bool           # DNSKEY繝ｬ繧ｳ繝ｼ繝峨′縺ゅｋ縺・
    hasDs*: bool               # DS繝ｬ繧ｳ繝ｼ繝峨′縺ゅｋ縺・
    signatureExpiration*: Time  # 鄂ｲ蜷阪・譛牙柑譛滄剞
    keyAlgorithms*: seq[DnsKeyAlgorithm]  # 菴ｿ逕ｨ縺輔ｌ縺ｦ縺・ｋ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝
    verificationTime*: float   # 讀懆ｨｼ縺ｫ縺九°縺｣縺滓凾髢難ｼ医Α繝ｪ遘抵ｼ・
    errorMessages*: seq[string]  # 繧ｨ繝ｩ繝ｼ繝｡繝・そ繝ｼ繧ｸ
    warnings*: seq[string]     # 隴ｦ蜻翫Γ繝・そ繝ｼ繧ｸ

  DnssecVerificationCache* = ref object
    ## DNSSEC讀懆ｨｼ邨先棡繧ｭ繝｣繝・す繝･
    cache*: Table[string, tuple[status: DnssecStatus, expiration: Time]]
    maxEntries*: int           # 繧ｭ繝｣繝・す繝･縺ｮ譛螟ｧ繧ｨ繝ｳ繝医Μ謨ｰ
    hits*: int                 # 繧ｭ繝｣繝・す繝･繝偵ャ繝域焚
    misses*: int               # 繧ｭ繝｣繝・す繝･繝溘せ謨ｰ

# 邨ｱ險医→繝｡繝医Μ繧ｯ繧ｹ

# 譛譁ｰ縺ｮ繧ｻ繧ｭ繝･繝ｪ繝・ぅ讓呎ｺ悶∈縺ｮ蟇ｾ蠢・
proc checkDnsKeyCompliance*(key: DnsKeyRecord): tuple[compliant: bool, issues: seq[string]] =
  ## DNSKEY縺軍FC 8624縺翫ｈ縺ｳRFC 8901縺ｫ貅匁侠縺励※縺・ｋ縺九メ繧ｧ繝・け
  var issues: seq[string] = @[]
  var compliant = true
  
  # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝繝√ぉ繝・け
  case key.algorithm
  of RSA_MD5:
    issues.add("RSA_MD5縺ｯ髱樊耳螂ｨ縺翫ｈ縺ｳ螳牙・縺ｧ縺ｪ縺・(RFC 8624)")
    compliant = false
  
  of RSA_SHA1, RSASHA1_NSEC3_SHA1:
    issues.add("SHA-1繝吶・繧ｹ縺ｮ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｯ髱樊耳螂ｨ (RFC 8624)")
    compliant = false
  
  of DSA, DSA_NSEC3_SHA1:
    issues.add("DSA繝吶・繧ｹ縺ｮ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｯ髱樊耳螂ｨ (RFC 8624)")
    compliant = false
  
  of ECC_GOST:
    issues.add("GOST R 34.10-2001縺ｯ螳溯｣・′蛻ｶ髯舌＆繧後※縺・ｋ (RFC 8624)")
    compliant = false
  
  of RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448:
    # 縺薙ｌ繧峨・謗ｨ螂ｨ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝
    discard
  
  else:
    issues.add("荳肴・縺ｪ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝: " & $key.algorithm)
    compliant = false
  
  # 骰ｵ髟ｷ繝√ぉ繝・け
  if not checkKeyLength(key):
    case key.algorithm
    of RSA_SHA1, RSA_SHA256, RSA_SHA512, RSASHA1_NSEC3_SHA1:
      issues.add("RSA骰ｵ髟ｷ縺梧耳螂ｨ縺ｮ2048繝薙ャ繝域悴貅")
    of ECDSA_P256_SHA256, ECDSA_P384_SHA384:
      issues.add("ECDSA骰ｵ髟ｷ縺碁←蛻・〒縺ｪ縺・)
    of ED25519, ED448:
      issues.add("EdDSA骰ｵ髟ｷ縺碁←蛻・〒縺ｪ縺・)
    else:
      issues.add("骰ｵ髟ｷ縺御ｸ埼←蛻・)
    compliant = false
  
  # 繝輔Λ繧ｰ繝√ぉ繝・け
  if not isZoneKey(key):
    issues.add("繧ｾ繝ｼ繝ｳ繧ｭ繝ｼ繝輔Λ繧ｰ縺瑚ｨｭ螳壹＆繧後※縺・↑縺・)
    compliant = false
  
  # 繝励Ο繝医さ繝ｫ繝輔ぅ繝ｼ繝ｫ繝峨メ繧ｧ繝・け (RFC 4034: 蟶ｸ縺ｫ3)
  if key.protocol != 3:
    issues.add("繝励Ο繝医さ繝ｫ繝輔ぅ繝ｼ繝ｫ繝峨′3縺ｧ縺ｯ縺ｪ縺・)
    compliant = false
  
  return (compliant: compliant, issues: issues)

proc checkDnssecChainCompliance*(domain: string): Future[tuple[compliant: bool, issues: Table[string, seq[string]]]] {.async.} =
  ## DNSSEC菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ蜈ｨ菴薙′RFC貅匁侠縺九メ繧ｧ繝・け
  var results: Table[string, seq[string]] = initTable[string, seq[string]]()
  var overallCompliant = true
  
  # 繝峨Γ繧､繝ｳ繝√ぉ繝ｼ繝ｳ繧偵ユ繧ｹ繝・
  let testResults = await testDnssecChain(domain)
  
  for result in testResults:
    var domainIssues: seq[string] = @[]
    
    # 鄂ｲ蜷肴怏蜉ｹ譛滄剞繝√ぉ繝・け
    let now = getTime()
    if result.signatureExpiration < now:
      domainIssues.add("鄂ｲ蜷阪′譛滄剞蛻・ｌ")
      overallCompliant = false
    elif result.signatureExpiration < now + 7.int64.days:
      domainIssues.add("鄂ｲ蜷阪′7譌･莉･蜀・↓譛滄剞蛻・ｌ")
    
    # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝繝√ぉ繝・け
    for algorithm in result.keyAlgorithms:
      if algorithm notin RECOMMENDED_ALGORITHMS:
        domainIssues.add($algorithm & "縺ｯ迴ｾ蝨ｨ謗ｨ螂ｨ縺輔ｌ縺ｦ縺・↑縺・)
        overallCompliant = false
    
    if not result.hasValidSignature:
      domainIssues.add("譛牙柑縺ｪ鄂ｲ蜷阪′縺ｪ縺・)
      overallCompliant = false
    
    if not result.hasDnskey:
      domainIssues.add("DNSKEY繝ｬ繧ｳ繝ｼ繝峨′縺ｪ縺・)
      overallCompliant = false
    
    if domainIssues.len > 0:
      results[result.domain] = domainIssues
  
  return (compliant: overallCompliant, issues: results)

proc checkNsec3Compliance*(nsec3: Nsec3Record): tuple[compliant: bool, issues: seq[string]] =
  ## NSEC3縺軍FC 5155縺翫ｈ縺ｳRFC 9276縺ｫ貅匁侠縺励※縺・ｋ縺九メ繧ｧ繝・け
  var issues: seq[string] = @[]
  var compliant = true
  
  # RFC 9276縺ｫ蝓ｺ縺･縺乗怙驕ｩ蛹匁耳螂ｨ莠矩・
  if nsec3.iterations > 0:
    issues.add("RFC 9276縺ｯ蜿榊ｾｩ蝗樊焚0繧呈耳螂ｨ")
    compliant = false
  
  # 蜿榊ｾｩ蝗樊焚縺ｮ螳牙・諤ｧ繝√ぉ繝・け
  if nsec3.iterations > NSEC3_MAX_ITERATIONS:
    issues.add("蜿榊ｾｩ蝗樊焚縺梧耳螂ｨ荳企剞繧定ｶ・∴縺ｦ縺・ｋ")
    compliant = false
  
  # 繧ｽ繝ｫ繝磯聞繝√ぉ繝・け
  if nsec3.salt.len > 8:
    issues.add("髟ｷ縺・た繝ｫ繝医・荳崎ｦ・(RFC 9276)")
    compliant = false
  
  # 繝上ャ繧ｷ繝･繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝繝√ぉ繝・け
  if nsec3.hashAlgorithm != 1:  # SHA-1縺ｮ縺ｿ縺軍FC 5155縺ｧ螳夂ｾｩ
    issues.add("譛ｪ螳夂ｾｩ縺ｮ繝上ャ繧ｷ繝･繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝")
    compliant = false
  
  # 繧ｪ繝励ヨ繧｢繧ｦ繝医ヵ繝ｩ繧ｰ
  if (nsec3.flags and 0x01) != 0:
    issues.add("繧ｪ繝励ヨ繧｢繧ｦ繝医ヵ繝ｩ繧ｰ縺御ｽｿ逕ｨ縺輔ｌ縺ｦ縺・ｋ - 繧ｻ繧ｭ繝･繝ｪ繝・ぅ縺ｸ縺ｮ蠖ｱ髻ｿ縺ｫ豕ｨ諢・)
  
  return (compliant: compliant, issues: issues)

# 鬮伜ｺｦ縺ｪ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ譛驕ｩ蛹・
type
  DnssecValidationMetrics* = object
    ## DNSSEC讀懆ｨｼ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ繝｡繝医Μ繧ｯ繧ｹ
    resolutionTime*: float          # 隗｣豎ｺ譎る俣 (ms)
    validationTime*: float          # 讀懆ｨｼ譎る俣 (ms)
    cacheHitCount*: int             # 繧ｭ繝｣繝・す繝･繝偵ャ繝域焚
    queryCount*: int                # DNS繧ｯ繧ｨ繝ｪ謨ｰ
    parseTime*: float               # 繝代・繧ｹ譎る俣 (ms)
    cryptoTime*: float              # 證怜捷險育ｮ玲凾髢・(ms)
    memoryUsage*: int               # 繝｡繝｢繝ｪ菴ｿ逕ｨ驥・(繝舌う繝・

proc profileDnssecValidation*(domain: string, recordType: DnsRecordType): Future[DnssecValidationMetrics] {.async.} =
  ## DNSSEC讀懆ｨｼ縺ｮ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ繝励Ο繝輔ぃ繧､繝ｪ繝ｳ繧ｰ
  var metrics = DnssecValidationMetrics()
  
  let overallStart = epochTime()
  let parseStart = epochTime()
  
  # 繝｡繝｢繝ｪ菴ｿ逕ｨ驥上・蛻晄悄貂ｬ螳・
  let initialMemory = getOccupiedMem()
  
  # 繝舌Μ繝・・繧ｿ菴懈・
  var validator = newDnssecValidator()
  
  # 繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｿｽ蜉
  try:
    let rootAnchors = await loadRootTrustAnchors()
    for anchor in rootAnchors:
      validator.addTrustAnchor(".", anchor)
  except Exception as e:
    logError("繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ隱ｭ縺ｿ霎ｼ縺ｿ繧ｨ繝ｩ繝ｼ: " & e.msg)
    # 繝輔か繝ｼ繝ｫ繝舌ャ繧ｯ縺ｨ縺励※繝上・繝峨さ繝ｼ繝峨＆繧後◆繝ｫ繝ｼ繝・SK繧剃ｽｿ逕ｨ
    let rootKey = DnsKeyRecord(
      flags: 257,  # KSK
      protocol: 3,
      algorithm: RSA_SHA256,
      publicKey: getRootKeyData()
    )
    validator.addTrustAnchor(".", rootKey)
  
  metrics.parseTime = (epochTime() - parseStart) * 1000  # ms
  
  # DNS隗｣豎ｺ縺ｨ讀懆ｨｼ縺ｮ繝励Ο繝輔ぃ繧､繝ｪ繝ｳ繧ｰ
  let resolutionStart = epochTime()
  var cacheHits = 0
  
  # 讀懆ｨｼ繝√ぉ繝ｼ繝ｳ讒狗ｯ会ｼ医Ν繝ｼ繝医°繧牙ｯｾ雎｡繝峨Γ繧､繝ｳ縺ｾ縺ｧ・・
  let domainParts = domain.split('.')
  var currentDomain = ""
  
  for i in countdown(domainParts.len - 1, 0):
    if currentDomain.len == 0:
      currentDomain = domainParts[i]
    else:
      currentDomain = domainParts[i] & "." & currentDomain
    
    # DNSKEY繝ｬ繧ｳ繝ｼ繝牙叙蠕・
    let keyQueryStart = epochTime()
    let keyResult = await resolver.queryWithMetrics(currentDomain, DNSKEY)
    metrics.queryCount += keyResult.queryCount
    cacheHits += keyResult.cacheHits
    
    # RRSIG繝ｬ繧ｳ繝ｼ繝牙叙蠕・
    let rrsigQueryStart = epochTime()
    let rrsigResult = await resolver.queryWithMetrics(currentDomain, RRSIG)
    metrics.queryCount += rrsigResult.queryCount
    cacheHits += rrsigResult.cacheHits
    
    # DS繝ｬ繧ｳ繝ｼ繝牙叙蠕暦ｼ郁ｦｪ繧ｾ繝ｼ繝ｳ縺九ｉ・・
    if i > 0:
      let parentDomain = domainParts[i+1..^1].join(".")
      let dsQueryStart = epochTime()
      let dsResult = await resolver.queryWithMetrics(currentDomain, DS, parentDomain)
      metrics.queryCount += dsResult.queryCount
      cacheHits += dsResult.cacheHits
  
  # 蟇ｾ雎｡繝ｬ繧ｳ繝ｼ繝峨ち繧､繝励・蜿門ｾ励→讀懆ｨｼ
  let recordQueryStart = epochTime()
  let recordResult = await resolver.queryWithMetrics(domain, recordType)
  metrics.queryCount += recordResult.queryCount
  cacheHits += recordResult.cacheHits
  
  metrics.cacheHitCount = cacheHits
  
  # 證怜捷險育ｮ玲凾髢薙ｒ貂ｬ螳・
  let cryptoStart = epochTime()
  
  # 讀懆ｨｼ繝√ぉ繝ｼ繝ｳ縺ｮ證怜捷讀懆ｨｼ
  var verificationResults: seq[tuple[domain: string, recordType: DnsRecordType, valid: bool]]
  
  # 繝ｫ繝ｼ繝医°繧峨・讀懆ｨｼ繝√ぉ繝ｼ繝ｳ讒狗ｯ・
  currentDomain = ""
  for i in countdown(domainParts.len - 1, 0):
    if currentDomain.len == 0:
      currentDomain = domainParts[i]
    else:
      currentDomain = domainParts[i] & "." & currentDomain
    
    # DNSKEY縺ｮ讀懆ｨｼ
    let keyVerificationResult = await validator.verifyDnskeys(currentDomain)
    verificationResults.add((domain: currentDomain, recordType: DNSKEY, valid: keyVerificationResult.valid))
    
    # 隕ｪ繧ｾ繝ｼ繝ｳ縺ｨ縺ｮ菫｡鬆ｼ繝√ぉ繝ｼ繝ｳ讀懆ｨｼ・・S險倬鹸・・
    if i > 0:
      let dsVerificationResult = await validator.verifyDsChain(currentDomain)
      verificationResults.add((domain: currentDomain, recordType: DS, valid: dsVerificationResult.valid))
  
  # 蟇ｾ雎｡繝ｬ繧ｳ繝ｼ繝峨・讀懆ｨｼ
  let recordVerificationResult = await validator.verifyRecord(domain, recordType)
  verificationResults.add((domain: domain, recordType: recordType, valid: recordVerificationResult.valid))
  
  metrics.cryptoTime = (epochTime() - cryptoStart) * 1000  # ms
  
  # 繝舌Μ繝・・繧ｷ繝ｧ繝ｳ繝励Ο繧ｻ繧ｹ蜈ｨ菴薙・譎る俣
  let validationStart = epochTime()
  
  # 讀懆ｨｼ邨先棡縺ｮ髮・ｴ・→蛻・梵
  let isValid = verificationResults.allIt(it.valid)
  
  # 讀懆ｨｼ螟ｱ謨励・蝣ｴ蜷医・繧ｨ繝ｩ繝ｼ蛻・梵
  if not isValid:
    let failedVerifications = verificationResults.filterIt(not it.valid)
    for failure in failedVerifications:
      logWarning("DNSSEC讀懆ｨｼ螟ｱ謨・ " & failure.domain & " (" & $failure.recordType & ")")
  
  metrics.validationTime = (epochTime() - validationStart) * 1000  # ms
  
  # 蜈ｨ菴薙・隗｣豎ｺ譎る俣
  metrics.resolutionTime = (epochTime() - overallStart) * 1000  # ms
  
  # 繝｡繝｢繝ｪ菴ｿ逕ｨ驥上・險育ｮ・
  let finalMemory = getOccupiedMem()
  metrics.memoryUsage = finalMemory - initialMemory
  
  # 繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ繝・・繧ｿ縺ｮ繝ｭ繧ｰ險倬鹸
  logInfo("DNSSEC讀懆ｨｼ繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ: " & domain & " (" & $recordType & ")")
  logInfo("  隗｣豎ｺ譎る俣: " & $metrics.resolutionTime & "ms")
  logInfo("  讀懆ｨｼ譎る俣: " & $metrics.validationTime & "ms")
  logInfo("  證怜捷險育ｮ玲凾髢・ " & $metrics.cryptoTime & "ms")
  logInfo("  繧ｯ繧ｨ繝ｪ謨ｰ: " & $metrics.queryCount)
  logInfo("  繧ｭ繝｣繝・す繝･繝偵ャ繝・ " & $metrics.cacheHitCount)
  logInfo("  繝｡繝｢繝ｪ菴ｿ逕ｨ驥・ " & $(metrics.memoryUsage / 1024) & "KB")
  
  return metrics

proc optimizeDnssecMemoryUsage*(validator: DnssecValidator) =
  ## DNSSEC讀懆ｨｼ縺ｮ繝｡繝｢繝ｪ菴ｿ逕ｨ繧呈怙驕ｩ蛹・
  
  # 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ繧ｳ繝ｳ繝代け繝亥喧
  var compactTrustAnchors = initTable[string, seq[DnsKeyRecord]]()
  for domain, anchors in validator.trustAnchors:
    if anchors.len > 0:
      compactTrustAnchors[domain] = anchors
  
  validator.trustAnchors = compactTrustAnchors
  
  # DS繝ｬ繧ｳ繝ｼ繝峨・繧ｳ繝ｳ繝代け繝亥喧
  var compactDsRecords = initTable[string, seq[DsRecord]]()
  for domain, records in validator.dsRecords:
    if records.len > 0:
      compactDsRecords[domain] = records
  
  validator.dsRecords = compactDsRecords
  
  # 繧ｭ繝ｼ繝ｬ繧ｳ繝ｼ繝峨・繧ｳ繝ｳ繝代け繝亥喧
  var compactKeyRecords = initTable[string, seq[DnsKeyRecord]]()
  for domain, keys in validator.keyRecords:
    if keys.len > 0:
      compactKeyRecords[domain] = keys
  
  validator.keyRecords = compactKeyRecords
  
  # 繝｡繝｢繝ｪ譛驕ｩ蛹悶・蠕後；C繧剃ｿ・ｲ
  GC_fullCollect()

proc getValidationRecommendations*(metrics: DnssecValidationMetrics): seq[string] =
  ## 繝代ヵ繧ｩ繝ｼ繝槭Φ繧ｹ繝｡繝医Μ繧ｯ繧ｹ縺ｫ蝓ｺ縺･縺乗怙驕ｩ蛹匁耳螂ｨ莠矩・
  var recommendations: seq[string] = @[]
  
  # 讀懆ｨｼ譎る俣縺ｮ譛驕ｩ蛹・
  if metrics.validationTime > 100:
    recommendations.add("讀懆ｨｼ縺ｫ譎る俣縺後°縺九ｊ縺吶℃縺ｧ縺・(> 100ms) - 繧ｭ繝｣繝・す繝･縺ｮ菴ｿ逕ｨ繧呈､懆ｨ・)
  
  # 繧ｯ繧ｨ繝ｪ謨ｰ縺ｮ譛驕ｩ蛹・
  if metrics.queryCount > 5:
    recommendations.add("DNS繧ｯ繧ｨ繝ｪ謨ｰ縺悟､壹☆縺弱∪縺・- 繝舌ャ繝∝・逅・ｄ繝代う繝励Λ繧､繝ｳ蛹悶ｒ讀懆ｨ・)
  
  # 證怜捷險育ｮ励・譛驕ｩ蛹・
  if metrics.cryptoTime > metrics.validationTime * 0.7:
    recommendations.add("證怜捷險育ｮ励′驕・☆縺弱∪縺・- 繝上・繝峨え繧ｧ繧｢繧｢繧ｯ繧ｻ繝ｩ繝ｬ繝ｼ繧ｷ繝ｧ繝ｳ繧呈､懆ｨ・)
  
  # 繝｡繝｢繝ｪ菴ｿ逕ｨ驥上・譛驕ｩ蛹・
  if metrics.memoryUsage > 1024 * 1024:  # 1MB
    recommendations.add("繝｡繝｢繝ｪ菴ｿ逕ｨ驥上′螟壹☆縺弱∪縺・- 繧ｭ繝｣繝・す繝･繧ｵ繧､繧ｺ縺ｮ隱ｿ謨ｴ繧呈､懆ｨ・)
  
  return recommendations

# 螳滄°逕ｨ貅門ｙ螳御ｺ・ｩ溯・
proc loadRootTrustAnchorsFromWeb*(validator: DnssecValidator): Future[bool] {.async.} =
  ## IANA繧ｦ繧ｧ繝悶し繧､繝医°繧峨Ν繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｪｭ縺ｿ霎ｼ繧
  try:
    let ianaRootAnchorUrl = "https://data.iana.org/root-anchors/root-anchors.xml"
    let backupAnchorUrl = "https://www.iana.org/dnssec/files/root-anchors.xml"
    
    echo "IANA縺九ｉ繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧貞叙蠕嶺ｸｭ..."
    
    var httpClient = newAsyncHttpClient()
    httpClient.headers = newHttpHeaders({"User-Agent": "NimBrowser/1.0 DNSSEC Validator"})
    
    var response: string
    try:
      response = await httpClient.getContent(ianaRootAnchorUrl)
    except:
      echo "繝励Λ繧､繝槭Μ繧ｽ繝ｼ繧ｹ縺九ｉ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆縲ゅヰ繝・け繧｢繝・・繧定ｩｦ陦御ｸｭ..."
      response = await httpClient.getContent(backupAnchorUrl)
    
    finally:
      httpClient.close()
    
    # XML繧定ｧ｣譫舌＠縺ｦ菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧呈歓蜃ｺ
    let rootAnchors = parseRootAnchorsXml(response)
    
    var anchorCount = 0
    for anchor in rootAnchors:
      validator.addTrustAnchor(".", anchor)
      anchorCount.inc
    
    if anchorCount == 0:
      raise newException(ValueError, "譛牙柑縺ｪ菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ縺ｧ縺励◆")
    
    echo "繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ蜿門ｾ励↓謌仙粥縺励∪縺励◆: ", anchorCount, "蛟九・繧｢繝ｳ繧ｫ繝ｼ繧定ｪｭ縺ｿ霎ｼ縺ｿ縺ｾ縺励◆"
    return true
  except Exception as e:
    echo "繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆: ", e.msg
    return false

proc parseRootAnchorsXml(xmlContent: string): seq[DnsKeyRecord] =
  ## IANA縺ｮXML蠖｢蠑上・繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｧ｣譫舌☆繧・
  result = @[]
  
  try:
    let xml = parseXml(xmlContent)
    
    # XML縺九ｉKeyTag縺ｨ繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縲∝・髢矩嵯繝・・繧ｿ繧呈歓蜃ｺ
    for keyTag in xml.findAll("KeyTag"):
      let keyTagValue = parseInt(keyTag.innerText)
      
      # 蜷後§髫主ｱ､縺ｮ蜈・ｼ溯ｦ∫ｴ繧呈爾縺・
      let parent = keyTag.parent
      var algorithm = 0
      var publicKeyBase64 = ""
      
      for child in parent:
        if child.kind == xnElement:
          case child.tag:
            of "Algorithm":
              algorithm = parseInt(child.innerText)
            of "PublicKey":
              publicKeyBase64 = child.innerText.strip()
      
      if algorithm > 0 and publicKeyBase64 != "":
        # Base64繝・さ繝ｼ繝・
        let publicKeyData = decode(publicKeyBase64)
        
        # DNSKEY繝ｬ繧ｳ繝ｼ繝峨ｒ讒狗ｯ・
        let dnsKey = DnsKeyRecord(
          flags: 257,  # KSK (Key Signing Key)
          protocol: 3, # DNSSEC逕ｨ縺ｮ蝗ｺ螳壼､
          algorithm: DnsSecAlgorithm(algorithm),
          publicKey: publicKeyData,
          keyTag: uint16(keyTagValue)
        )
        
        result.add(dnsKey)
  except Exception as e:
    echo "XML隗｣譫舌お繝ｩ繝ｼ: ", e.msg

proc validateRootTrustAnchors*(validator: DnssecValidator): bool =
  ## 繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ譛牙柑諤ｧ繧呈､懆ｨｼ縺吶ｋ
  let rootAnchors = validator.getTrustAnchors(".")
  
  if rootAnchors.len == 0:
    echo "隴ｦ蜻・ 繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺瑚ｨｭ螳壹＆繧後※縺・∪縺帙ｓ"
    return false
  
  var validAnchors = 0
  for anchor in rootAnchors:
    # 蜈ｬ髢矩嵯縺ｮ謨ｴ蜷域ｧ繝√ぉ繝・け
    if anchor.publicKey.len < 64:
      echo "隴ｦ蜻・ 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ蜈ｬ髢矩嵯縺檎洒縺吶℃縺ｾ縺・
      continue
    
    # 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺ｮ繧ｵ繝昴・繝医メ繧ｧ繝・け
    if not isSupportedAlgorithm(anchor.algorithm):
      echo "隴ｦ蜻・ 繧ｵ繝昴・繝医＆繧後※縺・↑縺・い繝ｫ繧ｴ繝ｪ繧ｺ繝: ", ord(anchor.algorithm)
      continue
    
    # 繝輔Λ繧ｰ縺ｮ讀懆ｨｼ (KSK縺ｧ縺ゅｋ縺薙→繧堤｢ｺ隱・
    if (anchor.flags and 0x0101) != 0x0101:
      echo "隴ｦ蜻・ 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺桑SK縺ｧ縺ｯ縺ゅｊ縺ｾ縺帙ｓ"
      continue
    
    validAnchors.inc
  
  return validAnchors > 0

proc isSupportedAlgorithm(algorithm: DnsSecAlgorithm): bool =
  ## 繧｢繝ｫ繧ｴ繝ｪ繧ｺ繝縺後し繝昴・繝医＆繧後※縺・ｋ縺九メ繧ｧ繝・け
  case algorithm:
    of RSA_SHA1, RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519:
      return true
    else:
      return false

proc initDnssecModule*(): bool =
  ## DNSSEC讀懆ｨｼ繝｢繧ｸ繝･繝ｼ繝ｫ繧貞・譛溷喧
  try:
    echo "DNSSEC讀懆ｨｼ繝｢繧ｸ繝･繝ｼ繝ｫ繧貞・譛溷喧荳ｭ..."
    
    # 荵ｱ謨ｰ逕滓・蝎ｨ繧貞・譛溷喧
    randomize()
    
    # 證怜捷繝ｩ繧､繝悶Λ繝ｪ繧貞・譛溷喧
    initCryptoLibrary()
    
    # 繧ｰ繝ｭ繝ｼ繝舌Ν繝舌Μ繝・・繧ｿ繧剃ｽ懈・
    var globalValidator = newDnssecValidator()
    
    # 險ｭ螳壹ヵ繧｡繧､繝ｫ縺九ｉ繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｪｭ縺ｿ霎ｼ繧
    let configLoaded = loadTrustAnchorsFromConfig(globalValidator)
    
    # 險ｭ螳壹ヵ繧｡繧､繝ｫ縺九ｉ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ縺ｫ螟ｱ謨励＠縺溷ｴ蜷医∫ｵ・∩霎ｼ縺ｿ縺ｮ繝輔か繝ｼ繝ｫ繝舌ャ繧ｯ繧剃ｽｿ逕ｨ
    if not configLoaded:
      echo "險ｭ螳壹ヵ繧｡繧､繝ｫ縺九ｉ縺ｮ菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ隱ｭ縺ｿ霎ｼ縺ｿ縺ｫ螟ｱ謨励＠縺ｾ縺励◆縲らｵ・∩霎ｼ縺ｿ縺ｮ繝輔か繝ｼ繝ｫ繝舌ャ繧ｯ繧剃ｽｿ逕ｨ縺励∪縺吶・
      let rootKey = DnsKeyRecord(
        flags: 257,  # KSK
        protocol: 3,
        algorithm: RSA_SHA256,
        publicKey: getEmbeddedRootAnchor(),
        keyTag: 20326  # 螳滄圀縺ｮIANA KSK縺ｮ繧ｭ繝ｼ繧ｿ繧ｰ
      )
      globalValidator.addTrustAnchor(".", rootKey)
    
    # 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ讀懆ｨｼ
    if not validateRootTrustAnchors(globalValidator):
      echo "隴ｦ蜻・ 菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ縺ｮ讀懆ｨｼ縺ｫ螟ｱ謨励＠縺ｾ縺励◆縲８eb譖ｴ譁ｰ繧定ｩｦ縺ｿ縺ｾ縺吶・
      # 髱槫酔譛滄未謨ｰ繧貞酔譛溽噪縺ｫ蜻ｼ縺ｳ蜃ｺ縺・
      let webUpdateSuccess = waitFor loadRootTrustAnchorsFromWeb(globalValidator)
      
      if not webUpdateSuccess:
        echo "隴ｦ蜻・ Web譖ｴ譁ｰ縺ｫ繧ょ､ｱ謨励＠縺ｾ縺励◆縲・NSSEC讀懆ｨｼ縺梧ｭ｣縺励￥讖溯・縺励↑縺・庄閭ｽ諤ｧ縺後≠繧翫∪縺吶・
    
    # 繧ｰ繝ｭ繝ｼ繝舌Ν繧､繝ｳ繧ｹ繧ｿ繝ｳ繧ｹ繧定ｨｭ螳・
    setGlobalDnssecValidator(globalValidator)
    
    # 繧ｭ繝｣繝・す繝･縺ｮ蛻晄悄蛹・
    initDnssecCache()
    
    echo "DNSSEC讀懆ｨｼ繝｢繧ｸ繝･繝ｼ繝ｫ縺ｮ蛻晄悄蛹悶↓謌仙粥縺励∪縺励◆"
    return true
  except Exception as e:
    echo "DNSSEC讀懆ｨｼ繝｢繧ｸ繝･繝ｼ繝ｫ縺ｮ蛻晄悄蛹悶↓螟ｱ謨励＠縺ｾ縺励◆: ", e.msg
    return false

proc initCryptoLibrary() =
  ## 證怜捷繝ｩ繧､繝悶Λ繝ｪ縺ｮ蛻晄悄蛹・
  # OpenSSL縺ｾ縺溘・蜷檎ｭ峨・繝ｩ繧､繝悶Λ繝ｪ縺ｮ蛻晄悄蛹悶さ繝ｼ繝・
  when defined(openssl):
    discard openssl.init()
  
  # 繧ｨ繝ｳ繝医Ο繝斐・繝励・繝ｫ縺ｮ蛻晄悄蛹・
  var entropySource = newEntropySource()
  setGlobalEntropySource(entropySource)

proc loadTrustAnchorsFromConfig(validator: DnssecValidator): bool =
  ## 險ｭ螳壹ヵ繧｡繧､繝ｫ縺九ｉ繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ繧定ｪｭ縺ｿ霎ｼ繧
  try:
    let configDir = getConfigDir() / "browser" / "dnssec"
    let trustAnchorFile = configDir / "root-anchors.json"
    
    if not fileExists(trustAnchorFile):
      return false
    
    let jsonContent = readFile(trustAnchorFile)
    let anchorsJson = parseJson(jsonContent)
    
    var loadedAnchors = 0
    
    for anchorItem in anchorsJson:
      let domain = anchorItem["domain"].getStr(".")
      let flags = anchorItem["flags"].getInt(257)
      let protocol = anchorItem["protocol"].getInt(3)
      let algorithm = anchorItem["algorithm"].getInt(8)  # RSA_SHA256
      let publicKeyBase64 = anchorItem["publicKey"].getStr("")
      let keyTag = anchorItem["keyTag"].getInt(0)
      
      if publicKeyBase64 == "":
        continue
      
      let publicKey = decode(publicKeyBase64)
      
      let dnsKey = DnsKeyRecord(
        flags: uint16(flags),
        protocol: uint8(protocol),
        algorithm: DnsSecAlgorithm(algorithm),
        publicKey: publicKey,
        keyTag: uint16(keyTag)
      )
      
      validator.addTrustAnchor(domain, dnsKey)
      loadedAnchors.inc
    
    return loadedAnchors > 0
  except Exception as e:
    echo "險ｭ螳壹ヵ繧｡繧､繝ｫ縺九ｉ縺ｮ菫｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ隱ｭ縺ｿ霎ｼ縺ｿ繧ｨ繝ｩ繝ｼ: ", e.msg
    return false

proc getEmbeddedRootAnchor(): string =
  ## 邨・∩霎ｼ縺ｿ縺ｮ繝ｫ繝ｼ繝井ｿ｡鬆ｼ繧｢繝ｳ繧ｫ繝ｼ・育ｷ頑･逕ｨ繝輔か繝ｼ繝ｫ繝舌ャ繧ｯ・・
  # 螳滄圀縺ｮIANA Root KSK縺ｮ蜈ｬ髢矩嵯・・ase64繧ｨ繝ｳ繧ｳ繝ｼ繝画ｸ医∩・・
  const embeddedRootKeyBase64 = """
  AwEAAaz/tAm8yTn4Mfeh5eyI96WSVexTBAvkMgJzkKTOiW1vkIbzxeF3
  +/4RgWOq7HrxRixHlFlExOLAJr5emLvN7SWXgnLh4+B5xQlNVz8Og8kv
  ArMtNROxVQuCaSnIDdD5LKyWbRd2n9WGe2R8PzgCmr3EgVLrjyBxWezF
  0jLHwVN8efS3rCj/EWgvIWgb9tarpVUDK/b58Da+sqqls3eNbuv7pr+e
  oZG+SrDK6nWeL3c6H5Apxz7LjVc1uTIdsIVJs3bwJUuAisBUpQvYIhJ/
  hBmImeUvnLZjkVHjGfZ0DJnwQrEtQFXGcBm9+3tLMJSUEU4XdpwQZ4zB
  vM2w2QB0CBoKdj+h3HPxzuctiOdeDVU=
  """
  return decode(embeddedRootKeyBase64.strip())

proc setGlobalDnssecValidator(validator: DnssecValidator) =
  ## 繧ｰ繝ｭ繝ｼ繝舌ΝDNSSEC繝舌Μ繝・・繧ｿ繧定ｨｭ螳・
  globalDnssecValidator = validator

proc initDnssecCache() =
  ## DNSSEC繧ｭ繝｣繝・す繝･縺ｮ蛻晄悄蛹・
  dnssecCache = newDnssecCache()
  dnssecCache.setMaxSize(1024 * 1024 * 5)  # 5MB
  dnssecCache.setTTL(3600)  # 1譎る俣

# 繧ｰ繝ｭ繝ｼ繝舌Ν螟画焚
var 
  globalDnssecValidator: DnssecValidator
  dnssecCache: DnssecCache

# 繧ｰ繝ｭ繝ｼ繝舌Ν蛻晄悄蛹・
when isMainModule:
  if not initDnssecModule():
    echo "隴ｦ蜻・ DNSSEC讀懆ｨｼ繝｢繧ｸ繝･繝ｼ繝ｫ縺ｮ蛻晄悄蛹悶↓螟ｱ謨励＠縺ｾ縺励◆縲ゆｸ驛ｨ縺ｮ讖溯・縺悟宛髯舌＆繧後ｋ蜿ｯ閭ｽ諤ｧ縺後≠繧翫∪縺吶・
